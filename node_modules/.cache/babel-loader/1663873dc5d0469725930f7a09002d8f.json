{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _layout = _interopRequireDefault(require(\"@react-pdf/textkit/layout\"));\n\nvar _linebreaker = _interopRequireDefault(require(\"@react-pdf/textkit/engines/linebreaker\"));\n\nvar _justification = _interopRequireDefault(require(\"@react-pdf/textkit/engines/justification\"));\n\nvar _textDecoration = _interopRequireDefault(require(\"@react-pdf/textkit/engines/textDecoration\"));\n\nvar _scriptItemizer = _interopRequireDefault(require(\"@react-pdf/textkit/engines/scriptItemizer\"));\n\nvar _wordHyphenation = _interopRequireDefault(require(\"@react-pdf/textkit/engines/wordHyphenation\"));\n\nvar _fontSubstitution = _interopRequireDefault(require(\"./fontSubstitution\"));\n\nvar _getAttributedString = _interopRequireDefault(require(\"./getAttributedString\"));\n\nconst engines = {\n  linebreaker: _linebreaker.default,\n  justification: _justification.default,\n  textDecoration: _textDecoration.default,\n  scriptItemizer: _scriptItemizer.default,\n  wordHyphenation: _wordHyphenation.default,\n  fontSubstitution: _fontSubstitution.default\n};\nconst engine = (0, _layout.default)(engines);\nconst getMaxLines = R.path(['style', 'maxLines']);\nconst getTextOverflow = R.path(['style', 'textOverflow']);\n/**\n * Get layout container for specific text node\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\n\nconst getContainer = (width, height) => node => {\n  const maxLines = getMaxLines(node);\n  const textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\n\n\nconst getLayoutOptions = fontStore => node => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  shrinkWhitespaceFactor: {\n    before: -0.5,\n    after: -0.5\n  },\n  hyphenationCallback: fontStore ? fontStore.getHyphenationCallback() : null\n});\n/**\n * Get text lines for given node\n *\n * @param {Object} node\n * @param {Number} container width\n * @param {Number} container height\n * @param {Number} fontStore font store\n * @returns {Array} layout lines\n */\n\n\nconst layoutText = (node, width, height, fontStore) => R.compose(R.reduce(R.concat, []), R.converge(engine, [(0, _getAttributedString.default)(fontStore), getContainer(width, height), getLayoutOptions(fontStore)]))(node);\n\nvar _default = R.curryN(4, layoutText);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/text/layoutText.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_layout","_linebreaker","_justification","_textDecoration","_scriptItemizer","_wordHyphenation","_fontSubstitution","_getAttributedString","engines","linebreaker","justification","textDecoration","scriptItemizer","wordHyphenation","fontSubstitution","engine","getMaxLines","path","getTextOverflow","getContainer","width","height","node","maxLines","textOverflow","x","y","Infinity","truncateMode","getLayoutOptions","fontStore","hyphenationPenalty","props","shrinkWhitespaceFactor","before","after","hyphenationCallback","getHyphenationCallback","layoutText","compose","reduce","concat","converge","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _layout = _interopRequireDefault(require(\"@react-pdf/textkit/layout\"));\n\nvar _linebreaker = _interopRequireDefault(require(\"@react-pdf/textkit/engines/linebreaker\"));\n\nvar _justification = _interopRequireDefault(require(\"@react-pdf/textkit/engines/justification\"));\n\nvar _textDecoration = _interopRequireDefault(require(\"@react-pdf/textkit/engines/textDecoration\"));\n\nvar _scriptItemizer = _interopRequireDefault(require(\"@react-pdf/textkit/engines/scriptItemizer\"));\n\nvar _wordHyphenation = _interopRequireDefault(require(\"@react-pdf/textkit/engines/wordHyphenation\"));\n\nvar _fontSubstitution = _interopRequireDefault(require(\"./fontSubstitution\"));\n\nvar _getAttributedString = _interopRequireDefault(require(\"./getAttributedString\"));\n\nconst engines = {\n  linebreaker: _linebreaker.default,\n  justification: _justification.default,\n  textDecoration: _textDecoration.default,\n  scriptItemizer: _scriptItemizer.default,\n  wordHyphenation: _wordHyphenation.default,\n  fontSubstitution: _fontSubstitution.default\n};\nconst engine = (0, _layout.default)(engines);\nconst getMaxLines = R.path(['style', 'maxLines']);\nconst getTextOverflow = R.path(['style', 'textOverflow']);\n/**\n * Get layout container for specific text node\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\n\nconst getContainer = (width, height) => node => {\n  const maxLines = getMaxLines(node);\n  const textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\n\n\nconst getLayoutOptions = fontStore => node => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  shrinkWhitespaceFactor: {\n    before: -0.5,\n    after: -0.5\n  },\n  hyphenationCallback: fontStore ? fontStore.getHyphenationCallback() : null\n});\n/**\n * Get text lines for given node\n *\n * @param {Object} node\n * @param {Number} container width\n * @param {Number} container height\n * @param {Number} fontStore font store\n * @returns {Array} layout lines\n */\n\n\nconst layoutText = (node, width, height, fontStore) => R.compose(R.reduce(R.concat, []), R.converge(engine, [(0, _getAttributedString.default)(fontStore), getContainer(width, height), getLayoutOptions(fontStore)]))(node);\n\nvar _default = R.curryN(4, layoutText);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}