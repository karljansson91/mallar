{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nconst isNotNil = R.complement(R.isNil);\n/**\n * Takes a list of predicates and returns the first predicate result that returns true for a given list of arguments\n *\n * @param  {...any} predicates\n * @param  {any} value\n */\n\nconst firstPass = (...fns) => value => {\n  let res;\n\n  for (let i = 0; i < fns.length; i += 1) {\n    const fn = fns[i];\n    res = fn(value);\n    if (isNotNil(res)) return res;\n  }\n\n  return res;\n};\n\nvar _default = firstPass;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/utils/firstPass.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","isNotNil","complement","isNil","firstPass","fns","value","res","i","length","fn","_default"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGL,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,MAAMK,QAAQ,GAAGD,CAAC,CAACE,UAAF,CAAaF,CAAC,CAACG,KAAf,CAAjB;AACA;;;;;;;AAOA,MAAMC,SAAS,GAAG,CAAC,GAAGC,GAAJ,KAAYC,KAAK,IAAI;AACrC,MAAIC,GAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtC,UAAME,EAAE,GAAGL,GAAG,CAACG,CAAD,CAAd;AACAD,IAAAA,GAAG,GAAGG,EAAE,CAACJ,KAAD,CAAR;AACA,QAAIL,QAAQ,CAACM,GAAD,CAAZ,EAAmB,OAAOA,GAAP;AACpB;;AAED,SAAOA,GAAP;AACD,CAVD;;AAYA,IAAII,QAAQ,GAAGP,SAAf;AACAP,OAAO,CAACE,OAAR,GAAkBY,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nconst isNotNil = R.complement(R.isNil);\n/**\n * Takes a list of predicates and returns the first predicate result that returns true for a given list of arguments\n *\n * @param  {...any} predicates\n * @param  {any} value\n */\n\nconst firstPass = (...fns) => value => {\n  let res;\n\n  for (let i = 0; i < fns.length; i += 1) {\n    const fn = fns[i];\n    res = fn(value);\n    if (isNotNil(res)) return res;\n  }\n\n  return res;\n};\n\nvar _default = firstPass;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}