{"ast":null,"code":"import r from \"immer\";\nimport { useState as n, useReducer as t, useCallback as o, useMemo as i } from \"react\";\n\nfunction u(t) {\n  var i = n(t),\n      u = i[1];\n  return [i[0], o(function (n) {\n    u(r(n));\n  }, [])];\n}\n\nfunction e(n, o, u) {\n  var e = i(function () {\n    return r(n);\n  }, [n]);\n  return t(e, o, u);\n}\n\nexport { u as useImmer, e as useImmerReducer };","map":{"version":3,"sources":["../src/index.ts"],"names":["useImmer","initialValue","useState","useCallback","updater","updateValue","produce","useImmerReducer","reducer","initialState","initialAction","cachedReducer","useMemo","useReducer"],"mappings":";;;SAgBgBA,C,CAASC,C,EAAAA;AAAAA,MAAAA,CAAAA,GACIC,CAAAA,CAASD,CAATC,CADJD;AAAAA,MACaA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CADbA;AACaA,SAC7B,CAAA,CAAA,CAAA,CAAA,CAAA,EAELE,CAAAA,CAAAA,UAAYC,CAAZD,EAAYC;AACVC,IAAAA,CAAAA,CAAYC,CAAAA,CAAQF,CAARE,CAAZD,CAAAA;AAAoBD,GADtBD,EAEG,EAFHA,CAFK,CAD6BF;AActC;;AAAA,SAAgBM,CAAhB,CAAgCC,CAAhC,EAAyCC,CAAzC,EAAuDC,CAAvD,EAAuDA;AAAAA,MAC/CC,CAAAA,GAAgBC,CAAAA,CAAAA,YAAAA;AAAAA,WAAcN,CAAAA,CAAQE,CAARF,CAAdM;AAAsBJ,GAAtBI,EAAgC,CAACJ,CAAD,CAAhCI,CAD+BF;AACEF,SAChDK,CAAAA,CAAWF,CAAXE,EAA0BJ,CAA1BI,EAA+CH,CAA/CG,CADgDL;AACDE;;AAAAA,SAAAA,CAAAA,IAAAA,QAAAA,EAAAA,CAAAA,IAAAA,eAAAA","sourcesContent":["import produce, { Draft } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type Reducer<S = any, A = any> = (\n  draftState: Draft<S>,\n  action: A\n) => void | S;\n\nexport type Updater<S> = (f: (draft: Draft<S>) => void | S) => void;\n\nexport type ImmerHook<S> = [S, Updater<S>];\n\nexport function useImmer<S = any>(\n  initialValue: S | (() => S)\n): [S, (f: (draft: Draft<S>) => void | S) => void];\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(initialValue);\n  return [\n    val,\n    useCallback(updater => {\n      updateValue(produce(updater));\n    }, [])\n  ];\n}\n\nexport function useImmerReducer<S = any, A = any>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  initialAction?: (initial: any) => S\n): [S, Dispatch<A>];\nexport function useImmerReducer(reducer, initialState, initialAction) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initialState as any, initialAction);\n}\n"]},"metadata":{},"sourceType":"module"}