{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nconst CONTENT_COLOR = '#a1c6e7';\nconst PADDING_COLOR = '#c4deb9';\nconst MARGIN_COLOR = '#f8cca1';\nconst shouldDebug = R.pathEq(['props', 'debug'], true); // TODO: Draw debug boxes using clipping to enhance quality\n\nconst debugContent = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft = 0,\n    paddingTop = 0,\n    paddingRight = 0,\n    paddingBottom = 0,\n    borderLeftWidth = 0,\n    borderTopWidth = 0,\n    borderRightWidth = 0,\n    borderBottomWidth = 0\n  } = node.box;\n  ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();\n});\n\nconst debugPadding = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft = 0,\n    paddingTop = 0,\n    paddingRight = 0,\n    paddingBottom = 0,\n    borderLeftWidth = 0,\n    borderTopWidth = 0,\n    borderRightWidth = 0,\n    borderBottomWidth = 0\n  } = node.box;\n  ctx.fillColor(PADDING_COLOR).opacity(0.5); // Padding top\n\n  ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill(); // Padding left\n\n  ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill(); // Padding right\n\n  ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill(); // Padding bottom\n\n  ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();\n});\n\nconst debugMargin = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    marginLeft = 0,\n    marginTop = 0,\n    marginRight = 0,\n    marginBottom = 0\n  } = node.box;\n  ctx.fillColor(MARGIN_COLOR).opacity(0.5); // Margin top\n\n  ctx.rect(left, top - marginTop, width, marginTop).fill(); // Margin left\n\n  ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill(); // Margin right\n\n  ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill(); // Margin bottom\n\n  ctx.rect(left, top + height, width, marginBottom).fill();\n});\n\nconst debugText = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    marginLeft = 0,\n    marginTop = 0,\n    marginRight = 0,\n    marginBottom = 0\n  } = node.box;\n  const roundedWidth = Math.round(width + marginLeft + marginRight);\n  const roundedHeight = Math.round(height + marginTop + marginBottom);\n  ctx.fontSize(4).opacity(1).fillColor('black').text(`${roundedWidth} x ${roundedHeight}`, left - marginLeft, Math.max(top - marginTop - 4, 1));\n});\n\nconst debugOrigin = ctx => R.tap(node => {\n  if (node.origin) {\n    ctx.circle(node.origin.left, node.origin.top, 3).fill('red').circle(node.origin.left, node.origin.top, 5).stroke('red');\n  }\n});\n\nconst renderDebug = ctx => R.tap(R.when(shouldDebug, R.compose((0, _restore.default)(ctx), debugOrigin(ctx), debugText(ctx), debugMargin(ctx), debugPadding(ctx), debugContent(ctx), (0, _save.default)(ctx))));\n\nvar _default = renderDebug;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/render/lib/primitives/renderDebug.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_save","_restore","CONTENT_COLOR","PADDING_COLOR","MARGIN_COLOR","shouldDebug","pathEq","debugContent","ctx","tap","node","left","top","width","height","paddingLeft","paddingTop","paddingRight","paddingBottom","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","box","fillColor","opacity","rect","fill","debugPadding","debugMargin","marginLeft","marginTop","marginRight","marginBottom","debugText","roundedWidth","Math","round","roundedHeight","fontSize","text","max","debugOrigin","origin","circle","stroke","renderDebug","when","compose","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nconst CONTENT_COLOR = '#a1c6e7';\nconst PADDING_COLOR = '#c4deb9';\nconst MARGIN_COLOR = '#f8cca1';\nconst shouldDebug = R.pathEq(['props', 'debug'], true); // TODO: Draw debug boxes using clipping to enhance quality\n\nconst debugContent = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft = 0,\n    paddingTop = 0,\n    paddingRight = 0,\n    paddingBottom = 0,\n    borderLeftWidth = 0,\n    borderTopWidth = 0,\n    borderRightWidth = 0,\n    borderBottomWidth = 0\n  } = node.box;\n  ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();\n});\n\nconst debugPadding = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft = 0,\n    paddingTop = 0,\n    paddingRight = 0,\n    paddingBottom = 0,\n    borderLeftWidth = 0,\n    borderTopWidth = 0,\n    borderRightWidth = 0,\n    borderBottomWidth = 0\n  } = node.box;\n  ctx.fillColor(PADDING_COLOR).opacity(0.5); // Padding top\n\n  ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill(); // Padding left\n\n  ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill(); // Padding right\n\n  ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill(); // Padding bottom\n\n  ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();\n});\n\nconst debugMargin = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    marginLeft = 0,\n    marginTop = 0,\n    marginRight = 0,\n    marginBottom = 0\n  } = node.box;\n  ctx.fillColor(MARGIN_COLOR).opacity(0.5); // Margin top\n\n  ctx.rect(left, top - marginTop, width, marginTop).fill(); // Margin left\n\n  ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill(); // Margin right\n\n  ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill(); // Margin bottom\n\n  ctx.rect(left, top + height, width, marginBottom).fill();\n});\n\nconst debugText = ctx => R.tap(node => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    marginLeft = 0,\n    marginTop = 0,\n    marginRight = 0,\n    marginBottom = 0\n  } = node.box;\n  const roundedWidth = Math.round(width + marginLeft + marginRight);\n  const roundedHeight = Math.round(height + marginTop + marginBottom);\n  ctx.fontSize(4).opacity(1).fillColor('black').text(`${roundedWidth} x ${roundedHeight}`, left - marginLeft, Math.max(top - marginTop - 4, 1));\n});\n\nconst debugOrigin = ctx => R.tap(node => {\n  if (node.origin) {\n    ctx.circle(node.origin.left, node.origin.top, 3).fill('red').circle(node.origin.left, node.origin.top, 5).stroke('red');\n  }\n});\n\nconst renderDebug = ctx => R.tap(R.when(shouldDebug, R.compose((0, _restore.default)(ctx), debugOrigin(ctx), debugText(ctx), debugMargin(ctx), debugPadding(ctx), debugContent(ctx), (0, _save.default)(ctx))));\n\nvar _default = renderDebug;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}