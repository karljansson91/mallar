{"ast":null,"code":"// Generated by CoffeeScript 1.12.1\n(function () {\n  var LineWrapper, number;\n  LineWrapper = require('../line_wrapper');\n  number = require('../object').number;\n  module.exports = {\n    initText: function () {\n      this.x = 0;\n      this.y = 0;\n      return this._lineGap = 0;\n    },\n    lineGap: function (_lineGap) {\n      this._lineGap = _lineGap;\n      return this;\n    },\n    moveDown: function (lines) {\n      if (lines == null) {\n        lines = 1;\n      }\n\n      this.y += this.currentLineHeight(true) * lines + this._lineGap;\n      return this;\n    },\n    moveUp: function (lines) {\n      if (lines == null) {\n        lines = 1;\n      }\n\n      this.y -= this.currentLineHeight(true) * lines + this._lineGap;\n      return this;\n    },\n    _text: function (text, x, y, options, lineCallback) {\n      var j, len, line, ref, wrapper;\n      options = this._initOptions(x, y, options);\n      text = '' + text;\n\n      if (options.wordSpacing) {\n        text = text.replace(/\\s{2,}/g, ' ');\n      }\n\n      if (options.width) {\n        wrapper = this._wrapper;\n\n        if (!wrapper) {\n          wrapper = new LineWrapper(this, options);\n          wrapper.on('line', lineCallback);\n        }\n\n        this._wrapper = options.continued ? wrapper : null;\n        this._textOptions = options.continued ? options : null;\n        wrapper.wrap(text, options);\n      } else {\n        ref = text.split('\\n');\n\n        for (j = 0, len = ref.length; j < len; j++) {\n          line = ref[j];\n          lineCallback(line, options);\n        }\n      }\n\n      return this;\n    },\n    text: function (text, x, y, options) {\n      return this._text(text, x, y, options, this._line.bind(this));\n    },\n    widthOfString: function (string, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);\n    },\n    heightOfString: function (text, options) {\n      var height, lineGap, ref, x, y;\n\n      if (options == null) {\n        options = {};\n      }\n\n      ref = this, x = ref.x, y = ref.y;\n      options = this._initOptions(options);\n      options.height = 2e308;\n      lineGap = options.lineGap || this._lineGap || 0;\n\n      this._text(text, this.x, this.y, options, function (_this) {\n        return function (line, options) {\n          return _this.y += _this.currentLineHeight(true) + lineGap;\n        };\n      }(this));\n\n      height = this.y - y;\n      this.x = x;\n      this.y = y;\n      return height;\n    },\n    list: function (list, x, y, options, wrapper) {\n      var flatten, i, indent, itemIndent, items, level, levels, midLine, r;\n      options = this._initOptions(x, y, options);\n      midLine = Math.round(this._font.ascender / 1000 * this._fontSize / 2);\n      r = options.bulletRadius || Math.round(this._font.ascender / 1000 * this._fontSize / 3);\n      indent = options.textIndent || r * 5;\n      itemIndent = options.bulletIndent || r * 8;\n      level = 1;\n      items = [];\n      levels = [];\n\n      flatten = function (list) {\n        var i, item, j, len, results;\n        results = [];\n\n        for (i = j = 0, len = list.length; j < len; i = ++j) {\n          item = list[i];\n\n          if (Array.isArray(item)) {\n            level++;\n            flatten(item);\n            results.push(level--);\n          } else {\n            items.push(item);\n            results.push(levels.push(level));\n          }\n        }\n\n        return results;\n      };\n\n      flatten(list);\n      wrapper = new LineWrapper(this, options);\n      wrapper.on('line', this._line.bind(this));\n      level = 1;\n      i = 0;\n      wrapper.on('firstLine', function (_this) {\n        return function () {\n          var diff, l;\n\n          if ((l = levels[i++]) !== level) {\n            diff = itemIndent * (l - level);\n            _this.x += diff;\n            wrapper.lineWidth -= diff;\n            level = l;\n          }\n\n          _this.circle(_this.x - indent + r, _this.y + midLine, r);\n\n          return _this.fill();\n        };\n      }(this));\n      wrapper.on('sectionStart', function (_this) {\n        return function () {\n          var pos;\n          pos = indent + itemIndent * (level - 1);\n          _this.x += pos;\n          return wrapper.lineWidth -= pos;\n        };\n      }(this));\n      wrapper.on('sectionEnd', function (_this) {\n        return function () {\n          var pos;\n          pos = indent + itemIndent * (level - 1);\n          _this.x -= pos;\n          return wrapper.lineWidth += pos;\n        };\n      }(this));\n      wrapper.wrap(items.join('\\n'), options);\n      return this;\n    },\n    _initOptions: function (x, y, options) {\n      var key, ref, val;\n\n      if (x == null) {\n        x = {};\n      }\n\n      if (options == null) {\n        options = {};\n      }\n\n      if (typeof x === 'object') {\n        options = x;\n        x = null;\n      }\n\n      options = function () {\n        var k, opts, v;\n        opts = {};\n\n        for (k in options) {\n          v = options[k];\n          opts[k] = v;\n        }\n\n        return opts;\n      }();\n\n      if (this._textOptions) {\n        ref = this._textOptions;\n\n        for (key in ref) {\n          val = ref[key];\n\n          if (key !== 'continued') {\n            if (options[key] == null) {\n              options[key] = val;\n            }\n          }\n        }\n      }\n\n      if (x != null) {\n        this.x = x;\n      }\n\n      if (y != null) {\n        this.y = y;\n      }\n\n      if (options.lineBreak !== false) {\n        if (options.width == null) {\n          options.width = this.page.width - this.x - this.page.margins.right;\n        }\n      }\n\n      options.columns || (options.columns = 0);\n\n      if (options.columnGap == null) {\n        options.columnGap = 18;\n      }\n\n      return options;\n    },\n    _line: function (text, options, wrapper) {\n      var lineGap;\n\n      if (options == null) {\n        options = {};\n      }\n\n      this._fragment(text, this.x, this.y, options);\n\n      lineGap = options.lineGap || this._lineGap || 0;\n\n      if (!wrapper) {\n        return this.x += this.widthOfString(text);\n      } else {\n        return this.y += this.currentLineHeight(true) + lineGap;\n      }\n    },\n    _fragment: function (text, x, y, options) {\n      var addSegment, align, base, characterSpacing, commands, d, encoded, encodedWord, flush, hadOffset, i, j, last, len, len1, lineWidth, lineY, m, mode, name, pos, positions, positionsWord, ref, ref1, renderedWidth, scale, spaceWidth, textWidth, word, wordSpacing, words;\n      text = ('' + text).replace(/\\n/g, '');\n\n      if (text.length === 0) {\n        return;\n      }\n\n      align = options.align || 'left';\n      wordSpacing = options.wordSpacing || 0;\n      characterSpacing = options.characterSpacing || 0;\n\n      if (options.width) {\n        switch (align) {\n          case 'right':\n            textWidth = this.widthOfString(text.replace(/\\s+$/, ''), options);\n            x += options.lineWidth - textWidth;\n            break;\n\n          case 'center':\n            x += options.lineWidth / 2 - options.textWidth / 2;\n            break;\n\n          case 'justify':\n            words = text.trim().split(/\\s+/);\n            textWidth = this.widthOfString(text.replace(/\\s+/g, ''), options);\n            spaceWidth = this.widthOfString(' ') + characterSpacing;\n            wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);\n        }\n      }\n\n      renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);\n\n      if (options.link) {\n        this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);\n      }\n\n      if (options.underline || options.strike) {\n        this.save();\n\n        if (!options.stroke) {\n          this.strokeColor.apply(this, this._fillColor);\n        }\n\n        lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n        this.lineWidth(lineWidth);\n        d = options.underline ? 1 : 2;\n        lineY = y + this.currentLineHeight() / d;\n\n        if (options.underline) {\n          lineY -= lineWidth;\n        }\n\n        this.moveTo(x, lineY);\n        this.lineTo(x + renderedWidth, lineY);\n        this.stroke();\n        this.restore();\n      }\n\n      this.save();\n      this.transform(1, 0, 0, -1, 0, this.page.height);\n      y = this.page.height - y - this._font.ascender / 1000 * this._fontSize;\n\n      if ((base = this.page.fonts)[name = this._font.id] == null) {\n        base[name] = this._font.ref();\n      }\n\n      this.addContent(\"BT\");\n      this.addContent(\"1 0 0 1 \" + number(x) + \" \" + number(y) + \" Tm\");\n      this.addContent(\"/\" + this._font.id + \" \" + number(this._fontSize) + \" Tf\");\n      mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n\n      if (mode) {\n        this.addContent(mode + \" Tr\");\n      }\n\n      if (characterSpacing) {\n        this.addContent(number(characterSpacing) + \" Tc\");\n      }\n\n      if (wordSpacing) {\n        words = text.trim().split(/\\s+/);\n        wordSpacing += this.widthOfString(' ') + characterSpacing;\n        wordSpacing *= 1000 / this._fontSize;\n        encoded = [];\n        positions = [];\n\n        for (j = 0, len = words.length; j < len; j++) {\n          word = words[j];\n          ref = this._font.encode(word, options.features), encodedWord = ref[0], positionsWord = ref[1];\n          encoded.push.apply(encoded, encodedWord);\n          positions.push.apply(positions, positionsWord);\n          positions[positions.length - 1].xAdvance += wordSpacing;\n        }\n      } else {\n        ref1 = this._font.encode(text, options.features), encoded = ref1[0], positions = ref1[1];\n      }\n\n      scale = this._fontSize / 1000;\n      commands = [];\n      last = 0;\n      hadOffset = false;\n\n      addSegment = function (_this) {\n        return function (cur) {\n          var advance, hex;\n\n          if (last < cur) {\n            hex = encoded.slice(last, cur).join('');\n            advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n            commands.push(\"<\" + hex + \"> \" + number(-advance));\n          }\n\n          return last = cur;\n        };\n      }(this);\n\n      flush = function (_this) {\n        return function (i) {\n          addSegment(i);\n\n          if (commands.length > 0) {\n            _this.addContent(\"[\" + commands.join(' ') + \"] TJ\");\n\n            return commands.length = 0;\n          }\n        };\n      }(this);\n\n      for (i = m = 0, len1 = positions.length; m < len1; i = ++m) {\n        pos = positions[i];\n\n        if (pos.xOffset || pos.yOffset) {\n          flush(i);\n          this.addContent(\"1 0 0 1 \" + number(x + pos.xOffset * scale) + \" \" + number(y + pos.yOffset * scale) + \" Tm\");\n          flush(i + 1);\n          hadOffset = true;\n        } else {\n          if (hadOffset) {\n            this.addContent(\"1 0 0 1 \" + number(x) + \" \" + number(y) + \" Tm\");\n            hadOffset = false;\n          }\n\n          if (pos.xAdvance - pos.advanceWidth !== 0) {\n            addSegment(i + 1);\n          }\n        }\n\n        x += pos.xAdvance * scale;\n      }\n\n      flush(i);\n      this.addContent(\"ET\");\n      return this.restore();\n    }\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/kaja/Code/mallar/node_modules/pdfkit/js/mixins/text.js"],"names":["LineWrapper","number","require","module","exports","initText","x","y","_lineGap","lineGap","moveDown","lines","currentLineHeight","moveUp","_text","text","options","lineCallback","j","len","line","ref","wrapper","_initOptions","wordSpacing","replace","width","_wrapper","on","continued","_textOptions","wrap","split","length","_line","bind","widthOfString","string","_font","_fontSize","features","characterSpacing","heightOfString","height","_this","list","flatten","i","indent","itemIndent","items","level","levels","midLine","r","Math","round","ascender","bulletRadius","textIndent","bulletIndent","item","results","Array","isArray","push","diff","l","lineWidth","circle","fill","pos","join","key","val","k","opts","v","lineBreak","page","margins","right","columns","columnGap","_fragment","addSegment","align","base","commands","d","encoded","encodedWord","flush","hadOffset","last","len1","lineY","m","mode","name","positions","positionsWord","ref1","renderedWidth","scale","spaceWidth","textWidth","word","words","trim","max","wordCount","link","underline","strike","save","stroke","strokeColor","apply","_fillColor","floor","moveTo","lineTo","restore","transform","fonts","id","addContent","encode","xAdvance","cur","advance","hex","slice","advanceWidth","xOffset","yOffset","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.1\n(function() {\n  var LineWrapper, number;\n\n  LineWrapper = require('../line_wrapper');\n\n  number = require('../object').number;\n\n  module.exports = {\n    initText: function() {\n      this.x = 0;\n      this.y = 0;\n      return this._lineGap = 0;\n    },\n    lineGap: function(_lineGap) {\n      this._lineGap = _lineGap;\n      return this;\n    },\n    moveDown: function(lines) {\n      if (lines == null) {\n        lines = 1;\n      }\n      this.y += this.currentLineHeight(true) * lines + this._lineGap;\n      return this;\n    },\n    moveUp: function(lines) {\n      if (lines == null) {\n        lines = 1;\n      }\n      this.y -= this.currentLineHeight(true) * lines + this._lineGap;\n      return this;\n    },\n    _text: function(text, x, y, options, lineCallback) {\n      var j, len, line, ref, wrapper;\n      options = this._initOptions(x, y, options);\n      text = '' + text;\n      if (options.wordSpacing) {\n        text = text.replace(/\\s{2,}/g, ' ');\n      }\n      if (options.width) {\n        wrapper = this._wrapper;\n        if (!wrapper) {\n          wrapper = new LineWrapper(this, options);\n          wrapper.on('line', lineCallback);\n        }\n        this._wrapper = options.continued ? wrapper : null;\n        this._textOptions = options.continued ? options : null;\n        wrapper.wrap(text, options);\n      } else {\n        ref = text.split('\\n');\n        for (j = 0, len = ref.length; j < len; j++) {\n          line = ref[j];\n          lineCallback(line, options);\n        }\n      }\n      return this;\n    },\n    text: function(text, x, y, options) {\n      return this._text(text, x, y, options, this._line.bind(this));\n    },\n    widthOfString: function(string, options) {\n      if (options == null) {\n        options = {};\n      }\n      return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);\n    },\n    heightOfString: function(text, options) {\n      var height, lineGap, ref, x, y;\n      if (options == null) {\n        options = {};\n      }\n      ref = this, x = ref.x, y = ref.y;\n      options = this._initOptions(options);\n      options.height = 2e308;\n      lineGap = options.lineGap || this._lineGap || 0;\n      this._text(text, this.x, this.y, options, (function(_this) {\n        return function(line, options) {\n          return _this.y += _this.currentLineHeight(true) + lineGap;\n        };\n      })(this));\n      height = this.y - y;\n      this.x = x;\n      this.y = y;\n      return height;\n    },\n    list: function(list, x, y, options, wrapper) {\n      var flatten, i, indent, itemIndent, items, level, levels, midLine, r;\n      options = this._initOptions(x, y, options);\n      midLine = Math.round((this._font.ascender / 1000 * this._fontSize) / 2);\n      r = options.bulletRadius || Math.round((this._font.ascender / 1000 * this._fontSize) / 3);\n      indent = options.textIndent || r * 5;\n      itemIndent = options.bulletIndent || r * 8;\n      level = 1;\n      items = [];\n      levels = [];\n      flatten = function(list) {\n        var i, item, j, len, results;\n        results = [];\n        for (i = j = 0, len = list.length; j < len; i = ++j) {\n          item = list[i];\n          if (Array.isArray(item)) {\n            level++;\n            flatten(item);\n            results.push(level--);\n          } else {\n            items.push(item);\n            results.push(levels.push(level));\n          }\n        }\n        return results;\n      };\n      flatten(list);\n      wrapper = new LineWrapper(this, options);\n      wrapper.on('line', this._line.bind(this));\n      level = 1;\n      i = 0;\n      wrapper.on('firstLine', (function(_this) {\n        return function() {\n          var diff, l;\n          if ((l = levels[i++]) !== level) {\n            diff = itemIndent * (l - level);\n            _this.x += diff;\n            wrapper.lineWidth -= diff;\n            level = l;\n          }\n          _this.circle(_this.x - indent + r, _this.y + midLine, r);\n          return _this.fill();\n        };\n      })(this));\n      wrapper.on('sectionStart', (function(_this) {\n        return function() {\n          var pos;\n          pos = indent + itemIndent * (level - 1);\n          _this.x += pos;\n          return wrapper.lineWidth -= pos;\n        };\n      })(this));\n      wrapper.on('sectionEnd', (function(_this) {\n        return function() {\n          var pos;\n          pos = indent + itemIndent * (level - 1);\n          _this.x -= pos;\n          return wrapper.lineWidth += pos;\n        };\n      })(this));\n      wrapper.wrap(items.join('\\n'), options);\n      return this;\n    },\n    _initOptions: function(x, y, options) {\n      var key, ref, val;\n      if (x == null) {\n        x = {};\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (typeof x === 'object') {\n        options = x;\n        x = null;\n      }\n      options = (function() {\n        var k, opts, v;\n        opts = {};\n        for (k in options) {\n          v = options[k];\n          opts[k] = v;\n        }\n        return opts;\n      })();\n      if (this._textOptions) {\n        ref = this._textOptions;\n        for (key in ref) {\n          val = ref[key];\n          if (key !== 'continued') {\n            if (options[key] == null) {\n              options[key] = val;\n            }\n          }\n        }\n      }\n      if (x != null) {\n        this.x = x;\n      }\n      if (y != null) {\n        this.y = y;\n      }\n      if (options.lineBreak !== false) {\n        if (options.width == null) {\n          options.width = this.page.width - this.x - this.page.margins.right;\n        }\n      }\n      options.columns || (options.columns = 0);\n      if (options.columnGap == null) {\n        options.columnGap = 18;\n      }\n      return options;\n    },\n    _line: function(text, options, wrapper) {\n      var lineGap;\n      if (options == null) {\n        options = {};\n      }\n      this._fragment(text, this.x, this.y, options);\n      lineGap = options.lineGap || this._lineGap || 0;\n      if (!wrapper) {\n        return this.x += this.widthOfString(text);\n      } else {\n        return this.y += this.currentLineHeight(true) + lineGap;\n      }\n    },\n    _fragment: function(text, x, y, options) {\n      var addSegment, align, base, characterSpacing, commands, d, encoded, encodedWord, flush, hadOffset, i, j, last, len, len1, lineWidth, lineY, m, mode, name, pos, positions, positionsWord, ref, ref1, renderedWidth, scale, spaceWidth, textWidth, word, wordSpacing, words;\n      text = ('' + text).replace(/\\n/g, '');\n      if (text.length === 0) {\n        return;\n      }\n      align = options.align || 'left';\n      wordSpacing = options.wordSpacing || 0;\n      characterSpacing = options.characterSpacing || 0;\n      if (options.width) {\n        switch (align) {\n          case 'right':\n            textWidth = this.widthOfString(text.replace(/\\s+$/, ''), options);\n            x += options.lineWidth - textWidth;\n            break;\n          case 'center':\n            x += options.lineWidth / 2 - options.textWidth / 2;\n            break;\n          case 'justify':\n            words = text.trim().split(/\\s+/);\n            textWidth = this.widthOfString(text.replace(/\\s+/g, ''), options);\n            spaceWidth = this.widthOfString(' ') + characterSpacing;\n            wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);\n        }\n      }\n      renderedWidth = options.textWidth + (wordSpacing * (options.wordCount - 1)) + (characterSpacing * (text.length - 1));\n      if (options.link) {\n        this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);\n      }\n      if (options.underline || options.strike) {\n        this.save();\n        if (!options.stroke) {\n          this.strokeColor.apply(this, this._fillColor);\n        }\n        lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n        this.lineWidth(lineWidth);\n        d = options.underline ? 1 : 2;\n        lineY = y + this.currentLineHeight() / d;\n        if (options.underline) {\n          lineY -= lineWidth;\n        }\n        this.moveTo(x, lineY);\n        this.lineTo(x + renderedWidth, lineY);\n        this.stroke();\n        this.restore();\n      }\n      this.save();\n      this.transform(1, 0, 0, -1, 0, this.page.height);\n      y = this.page.height - y - (this._font.ascender / 1000 * this._fontSize);\n      if ((base = this.page.fonts)[name = this._font.id] == null) {\n        base[name] = this._font.ref();\n      }\n      this.addContent(\"BT\");\n      this.addContent(\"1 0 0 1 \" + (number(x)) + \" \" + (number(y)) + \" Tm\");\n      this.addContent(\"/\" + this._font.id + \" \" + (number(this._fontSize)) + \" Tf\");\n      mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n      if (mode) {\n        this.addContent(mode + \" Tr\");\n      }\n      if (characterSpacing) {\n        this.addContent((number(characterSpacing)) + \" Tc\");\n      }\n      if (wordSpacing) {\n        words = text.trim().split(/\\s+/);\n        wordSpacing += this.widthOfString(' ') + characterSpacing;\n        wordSpacing *= 1000 / this._fontSize;\n        encoded = [];\n        positions = [];\n        for (j = 0, len = words.length; j < len; j++) {\n          word = words[j];\n          ref = this._font.encode(word, options.features), encodedWord = ref[0], positionsWord = ref[1];\n          encoded.push.apply(encoded, encodedWord);\n          positions.push.apply(positions, positionsWord);\n          positions[positions.length - 1].xAdvance += wordSpacing;\n        }\n      } else {\n        ref1 = this._font.encode(text, options.features), encoded = ref1[0], positions = ref1[1];\n      }\n      scale = this._fontSize / 1000;\n      commands = [];\n      last = 0;\n      hadOffset = false;\n      addSegment = (function(_this) {\n        return function(cur) {\n          var advance, hex;\n          if (last < cur) {\n            hex = encoded.slice(last, cur).join('');\n            advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n            commands.push(\"<\" + hex + \"> \" + (number(-advance)));\n          }\n          return last = cur;\n        };\n      })(this);\n      flush = (function(_this) {\n        return function(i) {\n          addSegment(i);\n          if (commands.length > 0) {\n            _this.addContent(\"[\" + (commands.join(' ')) + \"] TJ\");\n            return commands.length = 0;\n          }\n        };\n      })(this);\n      for (i = m = 0, len1 = positions.length; m < len1; i = ++m) {\n        pos = positions[i];\n        if (pos.xOffset || pos.yOffset) {\n          flush(i);\n          this.addContent(\"1 0 0 1 \" + (number(x + pos.xOffset * scale)) + \" \" + (number(y + pos.yOffset * scale)) + \" Tm\");\n          flush(i + 1);\n          hadOffset = true;\n        } else {\n          if (hadOffset) {\n            this.addContent(\"1 0 0 1 \" + (number(x)) + \" \" + (number(y)) + \" Tm\");\n            hadOffset = false;\n          }\n          if (pos.xAdvance - pos.advanceWidth !== 0) {\n            addSegment(i + 1);\n          }\n        }\n        x += pos.xAdvance * scale;\n      }\n      flush(i);\n      this.addContent(\"ET\");\n      return this.restore();\n    }\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}