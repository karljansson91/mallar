{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = exports.resolvePageDimensions = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _getPosition = _interopRequireDefault(require(\"../node/getPosition\"));\n\nvar _getDimension = _interopRequireDefault(require(\"../node/getDimension\"));\n\nvar _getBorderWidth = _interopRequireDefault(require(\"../node/getBorderWidth\"));\n\nvar _setDisplay = _interopRequireDefault(require(\"../node/setDisplay\"));\n\nvar _setOverflow = _interopRequireDefault(require(\"../node/setOverflow\"));\n\nvar _setFlexWrap = _interopRequireDefault(require(\"../node/setFlexWrap\"));\n\nvar _setFlexGrow = _interopRequireDefault(require(\"../node/setFlexGrow\"));\n\nvar _setFlexBasis = _interopRequireDefault(require(\"../node/setFlexBasis\"));\n\nvar _setAlignSelf = _interopRequireDefault(require(\"../node/setAlignSelf\"));\n\nvar _setAlignItems = _interopRequireDefault(require(\"../node/setAlignItems\"));\n\nvar _setFlexShrink = _interopRequireDefault(require(\"../node/setFlexShrink\"));\n\nvar _setAspectRatio = _interopRequireDefault(require(\"../node/setAspectRatio\"));\n\nvar _setAlignContent = _interopRequireDefault(require(\"../node/setAlignContent\"));\n\nvar _setPositionType = _interopRequireDefault(require(\"../node/setPositionType\"));\n\nvar _setFlexDirection = _interopRequireDefault(require(\"../node/setFlexDirection\"));\n\nvar _setJustifyContent = _interopRequireDefault(require(\"../node/setJustifyContent\"));\n\nvar _setMargin = require(\"../node/setMargin\");\n\nvar _setPadding = require(\"../node/setPadding\");\n\nvar _setBorderWidth = require(\"../node/setBorderWidth\");\n\nvar _setPosition = require(\"../node/setPosition\");\n\nvar _setDimension = require(\"../node/setDimension\");\n\nvar _measureSvg = _interopRequireDefault(require(\"../svg/measureSvg\"));\n\nvar _measureText = _interopRequireDefault(require(\"../text/measureText\"));\n\nvar _measureImage = _interopRequireDefault(require(\"../image/measureImage\"));\n\nvar _measureCanvas = _interopRequireDefault(require(\"../canvas/measureCanvas\"));\n\nconst YOGA_NODE = '_yogaNode';\n\nconst YOGA_CONFIG = _yogaLayoutPrebuilt.default.Config.create();\n\nYOGA_CONFIG.setPointScaleFactor(0);\nconst isType = R.propEq('type');\nconst isSvg = isType(P.Svg);\nconst isText = isType(P.Text);\nconst isNote = isType(P.Note);\nconst isPage = isType(P.Page);\nconst isImage = isType(P.Image);\nconst isCanvas = isType(P.Canvas);\nconst isTextInstance = isType(P.TextInstance);\n\nconst setNodeHeight = node => R.ifElse(isPage, (0, _setDimension.setHeight)(node.box.height), (0, _setDimension.setHeight)(node.box.height || node.style.height));\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nconst setYogaValues = R.tap(node => {\n  R.compose(setNodeHeight(node), (0, _setDimension.setWidth)(node.style.width), (0, _setDimension.setMinWidth)(node.style.minWidth), (0, _setDimension.setMaxWidth)(node.style.maxWidth), (0, _setDimension.setMinHeight)(node.style.minHeight), (0, _setDimension.setMaxHeight)(node.style.maxHeight), (0, _setMargin.setMarginTop)(node.style.marginTop), (0, _setMargin.setMarginRight)(node.style.marginRight), (0, _setMargin.setMarginBottom)(node.style.marginBottom), (0, _setMargin.setMarginLeft)(node.style.marginLeft), (0, _setPadding.setPaddingTop)(node.style.paddingTop), (0, _setPadding.setPaddingRight)(node.style.paddingRight), (0, _setPadding.setPaddingBottom)(node.style.paddingBottom), (0, _setPadding.setPaddingLeft)(node.style.paddingLeft), (0, _setPositionType.default)(node.style.position), (0, _setPosition.setPositionTop)(node.style.top), (0, _setPosition.setPositionRight)(node.style.right), (0, _setPosition.setPositionBottom)(node.style.bottom), (0, _setPosition.setPositionLeft)(node.style.left), (0, _setBorderWidth.setBorderTop)(node.style.borderTopWidth), (0, _setBorderWidth.setBorderRight)(node.style.borderRightWidth), (0, _setBorderWidth.setBorderBottom)(node.style.borderBottomWidth), (0, _setBorderWidth.setBorderLeft)(node.style.borderLeftWidth), (0, _setDisplay.default)(node.style.display), (0, _setFlexDirection.default)(node.style.flexDirection), (0, _setAlignSelf.default)(node.style.alignSelf), (0, _setAlignContent.default)(node.style.alignContent), (0, _setAlignItems.default)(node.style.alignItems), (0, _setJustifyContent.default)(node.style.justifyContent), (0, _setFlexWrap.default)(node.style.flexWrap), (0, _setOverflow.default)(node.style.overflow), (0, _setAspectRatio.default)(node.style.aspectRatio), (0, _setFlexBasis.default)(node.style.flexBasis), (0, _setFlexGrow.default)(node.style.flexGrow), (0, _setFlexShrink.default)(node.style.flexShrink))(node);\n});\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent\n * @param {Object} node\n * @param {Object} node\n */\n\nconst insertYogaNodes = parent => R.tap(child => parent.insertChild(child[YOGA_NODE], parent.getChildCount()));\n\nconst setMeasureFunc = (page, fontStore) => node => {\n  const yogaNode = node[YOGA_NODE];\n\n  if (isText(node)) {\n    yogaNode.setMeasureFunc((0, _measureText.default)(page, node, fontStore));\n  }\n\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc((0, _measureImage.default)(page, node));\n  }\n\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc((0, _measureCanvas.default)(page, node));\n  }\n\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc((0, _measureSvg.default)(page, node));\n  }\n\n  return node;\n};\n\nconst isNotText = R.complement(isText);\nconst isNotNote = R.complement(isNote);\nconst isNotSvg = R.complement(isSvg);\nconst isNotTextInstance = R.complement(isTextInstance);\nconst isLayoutElement = R.allPass([isNotText, isNotNote, isNotSvg]);\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n\nconst createYogaNodes = (page, fontStore) => node => {\n  const yogaNode = _yogaLayoutPrebuilt.default.Node.createWithConfig(YOGA_CONFIG);\n\n  return R.compose(setMeasureFunc(page, fontStore), R.when(isLayoutElement, R.evolve({\n    children: R.map(R.compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore)))\n  })), setYogaValues, R.assoc(YOGA_NODE, yogaNode))(node);\n};\n/**\n * Performs yoga calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nconst calculateLayout = R.tap(page => page[YOGA_NODE].calculateLayout());\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\n\nconst persistDimensions = node => {\n  return R.evolve({\n    children: R.map(R.when(isNotTextInstance, persistDimensions)),\n    box: R.always(R.mergeAll([(0, _getPadding.default)(node), (0, _getMargin.default)(node), (0, _getBorderWidth.default)(node), (0, _getPosition.default)(node), (0, _getDimension.default)(node)]))\n  })(node);\n};\n/**\n * Removes yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\n\n\nconst destroyYogaNodes = node => {\n  return R.compose(R.dissoc(YOGA_NODE), R.evolve({\n    children: R.map(destroyYogaNodes)\n  }))(node);\n};\n/**\n * Free yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\n\n\nconst freeYogaNodes = R.tap(n => n[YOGA_NODE] && n[YOGA_NODE].freeRecursive());\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\n\nconst resolvePageDimensions = (page, fontStore) => R.ifElse(R.isNil, R.always(null), R.compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore)))(page);\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} root object\n * @returns {Object} root object with correct 'box' layout attributes\n */\n\n\nexports.resolvePageDimensions = resolvePageDimensions;\n\nconst resolveDimensions = (node, fontStore) => {\n  const mapChild = child => resolvePageDimensions(child, fontStore);\n\n  return R.evolve({\n    children: R.map(mapChild)\n  })(node);\n};\n\nvar _default = resolveDimensions;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/steps/resolveDimensions.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","resolvePageDimensions","R","_yogaLayoutPrebuilt","P","_getMargin","_getPadding","_getPosition","_getDimension","_getBorderWidth","_setDisplay","_setOverflow","_setFlexWrap","_setFlexGrow","_setFlexBasis","_setAlignSelf","_setAlignItems","_setFlexShrink","_setAspectRatio","_setAlignContent","_setPositionType","_setFlexDirection","_setJustifyContent","_setMargin","_setPadding","_setBorderWidth","_setPosition","_setDimension","_measureSvg","_measureText","_measureImage","_measureCanvas","YOGA_NODE","YOGA_CONFIG","Config","create","setPointScaleFactor","isType","propEq","isSvg","Svg","isText","Text","isNote","Note","isPage","Page","isImage","Image","isCanvas","Canvas","isTextInstance","TextInstance","setNodeHeight","node","ifElse","setHeight","box","height","style","setYogaValues","tap","compose","setWidth","width","setMinWidth","minWidth","setMaxWidth","maxWidth","setMinHeight","minHeight","setMaxHeight","maxHeight","setMarginTop","marginTop","setMarginRight","marginRight","setMarginBottom","marginBottom","setMarginLeft","marginLeft","setPaddingTop","paddingTop","setPaddingRight","paddingRight","setPaddingBottom","paddingBottom","setPaddingLeft","paddingLeft","position","setPositionTop","top","setPositionRight","right","setPositionBottom","bottom","setPositionLeft","left","setBorderTop","borderTopWidth","setBorderRight","borderRightWidth","setBorderBottom","borderBottomWidth","setBorderLeft","borderLeftWidth","display","flexDirection","alignSelf","alignContent","alignItems","justifyContent","flexWrap","overflow","aspectRatio","flexBasis","flexGrow","flexShrink","insertYogaNodes","parent","child","insertChild","getChildCount","setMeasureFunc","page","fontStore","yogaNode","isNotText","complement","isNotNote","isNotSvg","isNotTextInstance","isLayoutElement","allPass","createYogaNodes","Node","createWithConfig","when","evolve","children","map","assoc","calculateLayout","persistDimensions","always","mergeAll","destroyYogaNodes","dissoc","freeYogaNodes","n","freeRecursive","isNil","resolveDimensions","mapChild","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,qBAAR,GAAgC,KAAK,CAAvD;;AAEA,IAAIC,CAAC,GAAGL,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIO,mBAAmB,GAAGR,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAhD;;AAEA,IAAIQ,CAAC,GAAGP,uBAAuB,CAACD,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,IAAIS,UAAU,GAAGV,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAvC;;AAEA,IAAIU,WAAW,GAAGX,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,IAAIW,YAAY,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAzC;;AAEA,IAAIY,aAAa,GAAGb,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAA1C;;AAEA,IAAIa,eAAe,GAAGd,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAA5C;;AAEA,IAAIc,WAAW,GAAGf,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,IAAIe,YAAY,GAAGhB,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAzC;;AAEA,IAAIgB,YAAY,GAAGjB,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAzC;;AAEA,IAAIiB,YAAY,GAAGlB,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAzC;;AAEA,IAAIkB,aAAa,GAAGnB,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAA1C;;AAEA,IAAImB,aAAa,GAAGpB,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAA1C;;AAEA,IAAIoB,cAAc,GAAGrB,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA3C;;AAEA,IAAIqB,cAAc,GAAGtB,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA3C;;AAEA,IAAIsB,eAAe,GAAGvB,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAA5C;;AAEA,IAAIuB,gBAAgB,GAAGxB,sBAAsB,CAACC,OAAO,CAAC,yBAAD,CAAR,CAA7C;;AAEA,IAAIwB,gBAAgB,GAAGzB,sBAAsB,CAACC,OAAO,CAAC,yBAAD,CAAR,CAA7C;;AAEA,IAAIyB,iBAAiB,GAAG1B,sBAAsB,CAACC,OAAO,CAAC,0BAAD,CAAR,CAA9C;;AAEA,IAAI0B,kBAAkB,GAAG3B,sBAAsB,CAACC,OAAO,CAAC,2BAAD,CAAR,CAA/C;;AAEA,IAAI2B,UAAU,GAAG3B,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAI4B,WAAW,GAAG5B,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAI6B,eAAe,GAAG7B,OAAO,CAAC,wBAAD,CAA7B;;AAEA,IAAI8B,YAAY,GAAG9B,OAAO,CAAC,qBAAD,CAA1B;;AAEA,IAAI+B,aAAa,GAAG/B,OAAO,CAAC,sBAAD,CAA3B;;AAEA,IAAIgC,WAAW,GAAGjC,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAxC;;AAEA,IAAIiC,YAAY,GAAGlC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAzC;;AAEA,IAAIkC,aAAa,GAAGnC,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA1C;;AAEA,IAAImC,cAAc,GAAGpC,sBAAsB,CAACC,OAAO,CAAC,yBAAD,CAAR,CAA3C;;AAEA,MAAMoC,SAAS,GAAG,WAAlB;;AAEA,MAAMC,WAAW,GAAG9B,mBAAmB,CAACH,OAApB,CAA4BkC,MAA5B,CAAmCC,MAAnC,EAApB;;AAEAF,WAAW,CAACG,mBAAZ,CAAgC,CAAhC;AACA,MAAMC,MAAM,GAAGnC,CAAC,CAACoC,MAAF,CAAS,MAAT,CAAf;AACA,MAAMC,KAAK,GAAGF,MAAM,CAACjC,CAAC,CAACoC,GAAH,CAApB;AACA,MAAMC,MAAM,GAAGJ,MAAM,CAACjC,CAAC,CAACsC,IAAH,CAArB;AACA,MAAMC,MAAM,GAAGN,MAAM,CAACjC,CAAC,CAACwC,IAAH,CAArB;AACA,MAAMC,MAAM,GAAGR,MAAM,CAACjC,CAAC,CAAC0C,IAAH,CAArB;AACA,MAAMC,OAAO,GAAGV,MAAM,CAACjC,CAAC,CAAC4C,KAAH,CAAtB;AACA,MAAMC,QAAQ,GAAGZ,MAAM,CAACjC,CAAC,CAAC8C,MAAH,CAAvB;AACA,MAAMC,cAAc,GAAGd,MAAM,CAACjC,CAAC,CAACgD,YAAH,CAA7B;;AAEA,MAAMC,aAAa,GAAGC,IAAI,IAAIpD,CAAC,CAACqD,MAAF,CAASV,MAAT,EAAiB,CAAC,GAAGlB,aAAa,CAAC6B,SAAlB,EAA6BF,IAAI,CAACG,GAAL,CAASC,MAAtC,CAAjB,EAAgE,CAAC,GAAG/B,aAAa,CAAC6B,SAAlB,EAA6BF,IAAI,CAACG,GAAL,CAASC,MAAT,IAAmBJ,IAAI,CAACK,KAAL,CAAWD,MAA3D,CAAhE,CAA9B;AACA;;;;;;;;AAQA,MAAME,aAAa,GAAG1D,CAAC,CAAC2D,GAAF,CAAMP,IAAI,IAAI;AAClCpD,EAAAA,CAAC,CAAC4D,OAAF,CAAUT,aAAa,CAACC,IAAD,CAAvB,EAA+B,CAAC,GAAG3B,aAAa,CAACoC,QAAlB,EAA4BT,IAAI,CAACK,KAAL,CAAWK,KAAvC,CAA/B,EAA8E,CAAC,GAAGrC,aAAa,CAACsC,WAAlB,EAA+BX,IAAI,CAACK,KAAL,CAAWO,QAA1C,CAA9E,EAAmI,CAAC,GAAGvC,aAAa,CAACwC,WAAlB,EAA+Bb,IAAI,CAACK,KAAL,CAAWS,QAA1C,CAAnI,EAAwL,CAAC,GAAGzC,aAAa,CAAC0C,YAAlB,EAAgCf,IAAI,CAACK,KAAL,CAAWW,SAA3C,CAAxL,EAA+O,CAAC,GAAG3C,aAAa,CAAC4C,YAAlB,EAAgCjB,IAAI,CAACK,KAAL,CAAWa,SAA3C,CAA/O,EAAsS,CAAC,GAAGjD,UAAU,CAACkD,YAAf,EAA6BnB,IAAI,CAACK,KAAL,CAAWe,SAAxC,CAAtS,EAA0V,CAAC,GAAGnD,UAAU,CAACoD,cAAf,EAA+BrB,IAAI,CAACK,KAAL,CAAWiB,WAA1C,CAA1V,EAAkZ,CAAC,GAAGrD,UAAU,CAACsD,eAAf,EAAgCvB,IAAI,CAACK,KAAL,CAAWmB,YAA3C,CAAlZ,EAA4c,CAAC,GAAGvD,UAAU,CAACwD,aAAf,EAA8BzB,IAAI,CAACK,KAAL,CAAWqB,UAAzC,CAA5c,EAAkgB,CAAC,GAAGxD,WAAW,CAACyD,aAAhB,EAA+B3B,IAAI,CAACK,KAAL,CAAWuB,UAA1C,CAAlgB,EAAyjB,CAAC,GAAG1D,WAAW,CAAC2D,eAAhB,EAAiC7B,IAAI,CAACK,KAAL,CAAWyB,YAA5C,CAAzjB,EAAonB,CAAC,GAAG5D,WAAW,CAAC6D,gBAAhB,EAAkC/B,IAAI,CAACK,KAAL,CAAW2B,aAA7C,CAApnB,EAAirB,CAAC,GAAG9D,WAAW,CAAC+D,cAAhB,EAAgCjC,IAAI,CAACK,KAAL,CAAW6B,WAA3C,CAAjrB,EAA0uB,CAAC,GAAGpE,gBAAgB,CAACpB,OAArB,EAA8BsD,IAAI,CAACK,KAAL,CAAW8B,QAAzC,CAA1uB,EAA8xB,CAAC,GAAG/D,YAAY,CAACgE,cAAjB,EAAiCpC,IAAI,CAACK,KAAL,CAAWgC,GAA5C,CAA9xB,EAAg1B,CAAC,GAAGjE,YAAY,CAACkE,gBAAjB,EAAmCtC,IAAI,CAACK,KAAL,CAAWkC,KAA9C,CAAh1B,EAAs4B,CAAC,GAAGnE,YAAY,CAACoE,iBAAjB,EAAoCxC,IAAI,CAACK,KAAL,CAAWoC,MAA/C,CAAt4B,EAA87B,CAAC,GAAGrE,YAAY,CAACsE,eAAjB,EAAkC1C,IAAI,CAACK,KAAL,CAAWsC,IAA7C,CAA97B,EAAk/B,CAAC,GAAGxE,eAAe,CAACyE,YAApB,EAAkC5C,IAAI,CAACK,KAAL,CAAWwC,cAA7C,CAAl/B,EAAgjC,CAAC,GAAG1E,eAAe,CAAC2E,cAApB,EAAoC9C,IAAI,CAACK,KAAL,CAAW0C,gBAA/C,CAAhjC,EAAknC,CAAC,GAAG5E,eAAe,CAAC6E,eAApB,EAAqChD,IAAI,CAACK,KAAL,CAAW4C,iBAAhD,CAAlnC,EAAsrC,CAAC,GAAG9E,eAAe,CAAC+E,aAApB,EAAmClD,IAAI,CAACK,KAAL,CAAW8C,eAA9C,CAAtrC,EAAsvC,CAAC,GAAG/F,WAAW,CAACV,OAAhB,EAAyBsD,IAAI,CAACK,KAAL,CAAW+C,OAApC,CAAtvC,EAAoyC,CAAC,GAAGrF,iBAAiB,CAACrB,OAAtB,EAA+BsD,IAAI,CAACK,KAAL,CAAWgD,aAA1C,CAApyC,EAA81C,CAAC,GAAG5F,aAAa,CAACf,OAAlB,EAA2BsD,IAAI,CAACK,KAAL,CAAWiD,SAAtC,CAA91C,EAAg5C,CAAC,GAAGzF,gBAAgB,CAACnB,OAArB,EAA8BsD,IAAI,CAACK,KAAL,CAAWkD,YAAzC,CAAh5C,EAAw8C,CAAC,GAAG7F,cAAc,CAAChB,OAAnB,EAA4BsD,IAAI,CAACK,KAAL,CAAWmD,UAAvC,CAAx8C,EAA4/C,CAAC,GAAGxF,kBAAkB,CAACtB,OAAvB,EAAgCsD,IAAI,CAACK,KAAL,CAAWoD,cAA3C,CAA5/C,EAAwjD,CAAC,GAAGnG,YAAY,CAACZ,OAAjB,EAA0BsD,IAAI,CAACK,KAAL,CAAWqD,QAArC,CAAxjD,EAAwmD,CAAC,GAAGrG,YAAY,CAACX,OAAjB,EAA0BsD,IAAI,CAACK,KAAL,CAAWsD,QAArC,CAAxmD,EAAwpD,CAAC,GAAG/F,eAAe,CAAClB,OAApB,EAA6BsD,IAAI,CAACK,KAAL,CAAWuD,WAAxC,CAAxpD,EAA8sD,CAAC,GAAGpG,aAAa,CAACd,OAAlB,EAA2BsD,IAAI,CAACK,KAAL,CAAWwD,SAAtC,CAA9sD,EAAgwD,CAAC,GAAGtG,YAAY,CAACb,OAAjB,EAA0BsD,IAAI,CAACK,KAAL,CAAWyD,QAArC,CAAhwD,EAAgzD,CAAC,GAAGnG,cAAc,CAACjB,OAAnB,EAA4BsD,IAAI,CAACK,KAAL,CAAW0D,UAAvC,CAAhzD,EAAo2D/D,IAAp2D;AACD,CAFqB,CAAtB;AAGA;;;;;;;;AAQA,MAAMgE,eAAe,GAAGC,MAAM,IAAIrH,CAAC,CAAC2D,GAAF,CAAM2D,KAAK,IAAID,MAAM,CAACE,WAAP,CAAmBD,KAAK,CAACxF,SAAD,CAAxB,EAAqCuF,MAAM,CAACG,aAAP,EAArC,CAAf,CAAlC;;AAEA,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,SAAP,KAAqBvE,IAAI,IAAI;AAClD,QAAMwE,QAAQ,GAAGxE,IAAI,CAACtB,SAAD,CAArB;;AAEA,MAAIS,MAAM,CAACa,IAAD,CAAV,EAAkB;AAChBwE,IAAAA,QAAQ,CAACH,cAAT,CAAwB,CAAC,GAAG9F,YAAY,CAAC7B,OAAjB,EAA0B4H,IAA1B,EAAgCtE,IAAhC,EAAsCuE,SAAtC,CAAxB;AACD;;AAED,MAAI9E,OAAO,CAACO,IAAD,CAAX,EAAmB;AACjBwE,IAAAA,QAAQ,CAACH,cAAT,CAAwB,CAAC,GAAG7F,aAAa,CAAC9B,OAAlB,EAA2B4H,IAA3B,EAAiCtE,IAAjC,CAAxB;AACD;;AAED,MAAIL,QAAQ,CAACK,IAAD,CAAZ,EAAoB;AAClBwE,IAAAA,QAAQ,CAACH,cAAT,CAAwB,CAAC,GAAG5F,cAAc,CAAC/B,OAAnB,EAA4B4H,IAA5B,EAAkCtE,IAAlC,CAAxB;AACD;;AAED,MAAIf,KAAK,CAACe,IAAD,CAAT,EAAiB;AACfwE,IAAAA,QAAQ,CAACH,cAAT,CAAwB,CAAC,GAAG/F,WAAW,CAAC5B,OAAhB,EAAyB4H,IAAzB,EAA+BtE,IAA/B,CAAxB;AACD;;AAED,SAAOA,IAAP;AACD,CApBD;;AAsBA,MAAMyE,SAAS,GAAG7H,CAAC,CAAC8H,UAAF,CAAavF,MAAb,CAAlB;AACA,MAAMwF,SAAS,GAAG/H,CAAC,CAAC8H,UAAF,CAAarF,MAAb,CAAlB;AACA,MAAMuF,QAAQ,GAAGhI,CAAC,CAAC8H,UAAF,CAAazF,KAAb,CAAjB;AACA,MAAM4F,iBAAiB,GAAGjI,CAAC,CAAC8H,UAAF,CAAa7E,cAAb,CAA1B;AACA,MAAMiF,eAAe,GAAGlI,CAAC,CAACmI,OAAF,CAAU,CAACN,SAAD,EAAYE,SAAZ,EAAuBC,QAAvB,CAAV,CAAxB;AACA;;;;;;;;AAQA,MAAMI,eAAe,GAAG,CAACV,IAAD,EAAOC,SAAP,KAAqBvE,IAAI,IAAI;AACnD,QAAMwE,QAAQ,GAAG3H,mBAAmB,CAACH,OAApB,CAA4BuI,IAA5B,CAAiCC,gBAAjC,CAAkDvG,WAAlD,CAAjB;;AAEA,SAAO/B,CAAC,CAAC4D,OAAF,CAAU6D,cAAc,CAACC,IAAD,EAAOC,SAAP,CAAxB,EAA2C3H,CAAC,CAACuI,IAAF,CAAOL,eAAP,EAAwBlI,CAAC,CAACwI,MAAF,CAAS;AACjFC,IAAAA,QAAQ,EAAEzI,CAAC,CAAC0I,GAAF,CAAM1I,CAAC,CAAC4D,OAAF,CAAUwD,eAAe,CAACQ,QAAD,CAAzB,EAAqCQ,eAAe,CAACV,IAAD,EAAOC,SAAP,CAApD,CAAN;AADuE,GAAT,CAAxB,CAA3C,EAEFjE,aAFE,EAEa1D,CAAC,CAAC2I,KAAF,CAAQ7G,SAAR,EAAmB8F,QAAnB,CAFb,EAE2CxE,IAF3C,CAAP;AAGD,CAND;AAOA;;;;;;;;AAQA,MAAMwF,eAAe,GAAG5I,CAAC,CAAC2D,GAAF,CAAM+D,IAAI,IAAIA,IAAI,CAAC5F,SAAD,CAAJ,CAAgB8G,eAAhB,EAAd,CAAxB;AACA;;;;;;;AAOA,MAAMC,iBAAiB,GAAGzF,IAAI,IAAI;AAChC,SAAOpD,CAAC,CAACwI,MAAF,CAAS;AACdC,IAAAA,QAAQ,EAAEzI,CAAC,CAAC0I,GAAF,CAAM1I,CAAC,CAACuI,IAAF,CAAON,iBAAP,EAA0BY,iBAA1B,CAAN,CADI;AAEdtF,IAAAA,GAAG,EAAEvD,CAAC,CAAC8I,MAAF,CAAS9I,CAAC,CAAC+I,QAAF,CAAW,CAAC,CAAC,GAAG3I,WAAW,CAACN,OAAhB,EAAyBsD,IAAzB,CAAD,EAAiC,CAAC,GAAGjD,UAAU,CAACL,OAAf,EAAwBsD,IAAxB,CAAjC,EAAgE,CAAC,GAAG7C,eAAe,CAACT,OAApB,EAA6BsD,IAA7B,CAAhE,EAAoG,CAAC,GAAG/C,YAAY,CAACP,OAAjB,EAA0BsD,IAA1B,CAApG,EAAqI,CAAC,GAAG9C,aAAa,CAACR,OAAlB,EAA2BsD,IAA3B,CAArI,CAAX,CAAT;AAFS,GAAT,EAGJA,IAHI,CAAP;AAID,CALD;AAMA;;;;;;;;AAQA,MAAM4F,gBAAgB,GAAG5F,IAAI,IAAI;AAC/B,SAAOpD,CAAC,CAAC4D,OAAF,CAAU5D,CAAC,CAACiJ,MAAF,CAASnH,SAAT,CAAV,EAA+B9B,CAAC,CAACwI,MAAF,CAAS;AAC7CC,IAAAA,QAAQ,EAAEzI,CAAC,CAAC0I,GAAF,CAAMM,gBAAN;AADmC,GAAT,CAA/B,EAEH5F,IAFG,CAAP;AAGD,CAJD;AAKA;;;;;;;;AAQA,MAAM8F,aAAa,GAAGlJ,CAAC,CAAC2D,GAAF,CAAMwF,CAAC,IAAIA,CAAC,CAACrH,SAAD,CAAD,IAAgBqH,CAAC,CAACrH,SAAD,CAAD,CAAasH,aAAb,EAA3B,CAAtB;AACA;;;;;;;;;AASA,MAAMrJ,qBAAqB,GAAG,CAAC2H,IAAD,EAAOC,SAAP,KAAqB3H,CAAC,CAACqD,MAAF,CAASrD,CAAC,CAACqJ,KAAX,EAAkBrJ,CAAC,CAAC8I,MAAF,CAAS,IAAT,CAAlB,EAAkC9I,CAAC,CAAC4D,OAAF,CAAUoF,gBAAV,EAA4BE,aAA5B,EAA2CL,iBAA3C,EAA8DD,eAA9D,EAA+ER,eAAe,CAACV,IAAD,EAAOC,SAAP,CAA9F,CAAlC,EAAoJD,IAApJ,CAAnD;AACA;;;;;;;;AAQA9H,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AAEA,MAAMuJ,iBAAiB,GAAG,CAAClG,IAAD,EAAOuE,SAAP,KAAqB;AAC7C,QAAM4B,QAAQ,GAAGjC,KAAK,IAAIvH,qBAAqB,CAACuH,KAAD,EAAQK,SAAR,CAA/C;;AAEA,SAAO3H,CAAC,CAACwI,MAAF,CAAS;AACdC,IAAAA,QAAQ,EAAEzI,CAAC,CAAC0I,GAAF,CAAMa,QAAN;AADI,GAAT,EAEJnG,IAFI,CAAP;AAGD,CAND;;AAQA,IAAIoG,QAAQ,GAAGF,iBAAf;AACA1J,OAAO,CAACE,OAAR,GAAkB0J,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = exports.resolvePageDimensions = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _getPosition = _interopRequireDefault(require(\"../node/getPosition\"));\n\nvar _getDimension = _interopRequireDefault(require(\"../node/getDimension\"));\n\nvar _getBorderWidth = _interopRequireDefault(require(\"../node/getBorderWidth\"));\n\nvar _setDisplay = _interopRequireDefault(require(\"../node/setDisplay\"));\n\nvar _setOverflow = _interopRequireDefault(require(\"../node/setOverflow\"));\n\nvar _setFlexWrap = _interopRequireDefault(require(\"../node/setFlexWrap\"));\n\nvar _setFlexGrow = _interopRequireDefault(require(\"../node/setFlexGrow\"));\n\nvar _setFlexBasis = _interopRequireDefault(require(\"../node/setFlexBasis\"));\n\nvar _setAlignSelf = _interopRequireDefault(require(\"../node/setAlignSelf\"));\n\nvar _setAlignItems = _interopRequireDefault(require(\"../node/setAlignItems\"));\n\nvar _setFlexShrink = _interopRequireDefault(require(\"../node/setFlexShrink\"));\n\nvar _setAspectRatio = _interopRequireDefault(require(\"../node/setAspectRatio\"));\n\nvar _setAlignContent = _interopRequireDefault(require(\"../node/setAlignContent\"));\n\nvar _setPositionType = _interopRequireDefault(require(\"../node/setPositionType\"));\n\nvar _setFlexDirection = _interopRequireDefault(require(\"../node/setFlexDirection\"));\n\nvar _setJustifyContent = _interopRequireDefault(require(\"../node/setJustifyContent\"));\n\nvar _setMargin = require(\"../node/setMargin\");\n\nvar _setPadding = require(\"../node/setPadding\");\n\nvar _setBorderWidth = require(\"../node/setBorderWidth\");\n\nvar _setPosition = require(\"../node/setPosition\");\n\nvar _setDimension = require(\"../node/setDimension\");\n\nvar _measureSvg = _interopRequireDefault(require(\"../svg/measureSvg\"));\n\nvar _measureText = _interopRequireDefault(require(\"../text/measureText\"));\n\nvar _measureImage = _interopRequireDefault(require(\"../image/measureImage\"));\n\nvar _measureCanvas = _interopRequireDefault(require(\"../canvas/measureCanvas\"));\n\nconst YOGA_NODE = '_yogaNode';\n\nconst YOGA_CONFIG = _yogaLayoutPrebuilt.default.Config.create();\n\nYOGA_CONFIG.setPointScaleFactor(0);\nconst isType = R.propEq('type');\nconst isSvg = isType(P.Svg);\nconst isText = isType(P.Text);\nconst isNote = isType(P.Note);\nconst isPage = isType(P.Page);\nconst isImage = isType(P.Image);\nconst isCanvas = isType(P.Canvas);\nconst isTextInstance = isType(P.TextInstance);\n\nconst setNodeHeight = node => R.ifElse(isPage, (0, _setDimension.setHeight)(node.box.height), (0, _setDimension.setHeight)(node.box.height || node.style.height));\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nconst setYogaValues = R.tap(node => {\n  R.compose(setNodeHeight(node), (0, _setDimension.setWidth)(node.style.width), (0, _setDimension.setMinWidth)(node.style.minWidth), (0, _setDimension.setMaxWidth)(node.style.maxWidth), (0, _setDimension.setMinHeight)(node.style.minHeight), (0, _setDimension.setMaxHeight)(node.style.maxHeight), (0, _setMargin.setMarginTop)(node.style.marginTop), (0, _setMargin.setMarginRight)(node.style.marginRight), (0, _setMargin.setMarginBottom)(node.style.marginBottom), (0, _setMargin.setMarginLeft)(node.style.marginLeft), (0, _setPadding.setPaddingTop)(node.style.paddingTop), (0, _setPadding.setPaddingRight)(node.style.paddingRight), (0, _setPadding.setPaddingBottom)(node.style.paddingBottom), (0, _setPadding.setPaddingLeft)(node.style.paddingLeft), (0, _setPositionType.default)(node.style.position), (0, _setPosition.setPositionTop)(node.style.top), (0, _setPosition.setPositionRight)(node.style.right), (0, _setPosition.setPositionBottom)(node.style.bottom), (0, _setPosition.setPositionLeft)(node.style.left), (0, _setBorderWidth.setBorderTop)(node.style.borderTopWidth), (0, _setBorderWidth.setBorderRight)(node.style.borderRightWidth), (0, _setBorderWidth.setBorderBottom)(node.style.borderBottomWidth), (0, _setBorderWidth.setBorderLeft)(node.style.borderLeftWidth), (0, _setDisplay.default)(node.style.display), (0, _setFlexDirection.default)(node.style.flexDirection), (0, _setAlignSelf.default)(node.style.alignSelf), (0, _setAlignContent.default)(node.style.alignContent), (0, _setAlignItems.default)(node.style.alignItems), (0, _setJustifyContent.default)(node.style.justifyContent), (0, _setFlexWrap.default)(node.style.flexWrap), (0, _setOverflow.default)(node.style.overflow), (0, _setAspectRatio.default)(node.style.aspectRatio), (0, _setFlexBasis.default)(node.style.flexBasis), (0, _setFlexGrow.default)(node.style.flexGrow), (0, _setFlexShrink.default)(node.style.flexShrink))(node);\n});\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent\n * @param {Object} node\n * @param {Object} node\n */\n\nconst insertYogaNodes = parent => R.tap(child => parent.insertChild(child[YOGA_NODE], parent.getChildCount()));\n\nconst setMeasureFunc = (page, fontStore) => node => {\n  const yogaNode = node[YOGA_NODE];\n\n  if (isText(node)) {\n    yogaNode.setMeasureFunc((0, _measureText.default)(page, node, fontStore));\n  }\n\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc((0, _measureImage.default)(page, node));\n  }\n\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc((0, _measureCanvas.default)(page, node));\n  }\n\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc((0, _measureSvg.default)(page, node));\n  }\n\n  return node;\n};\n\nconst isNotText = R.complement(isText);\nconst isNotNote = R.complement(isNote);\nconst isNotSvg = R.complement(isSvg);\nconst isNotTextInstance = R.complement(isTextInstance);\nconst isLayoutElement = R.allPass([isNotText, isNotNote, isNotSvg]);\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n\nconst createYogaNodes = (page, fontStore) => node => {\n  const yogaNode = _yogaLayoutPrebuilt.default.Node.createWithConfig(YOGA_CONFIG);\n\n  return R.compose(setMeasureFunc(page, fontStore), R.when(isLayoutElement, R.evolve({\n    children: R.map(R.compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore)))\n  })), setYogaValues, R.assoc(YOGA_NODE, yogaNode))(node);\n};\n/**\n * Performs yoga calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nconst calculateLayout = R.tap(page => page[YOGA_NODE].calculateLayout());\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\n\nconst persistDimensions = node => {\n  return R.evolve({\n    children: R.map(R.when(isNotTextInstance, persistDimensions)),\n    box: R.always(R.mergeAll([(0, _getPadding.default)(node), (0, _getMargin.default)(node), (0, _getBorderWidth.default)(node), (0, _getPosition.default)(node), (0, _getDimension.default)(node)]))\n  })(node);\n};\n/**\n * Removes yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\n\n\nconst destroyYogaNodes = node => {\n  return R.compose(R.dissoc(YOGA_NODE), R.evolve({\n    children: R.map(destroyYogaNodes)\n  }))(node);\n};\n/**\n * Free yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\n\n\nconst freeYogaNodes = R.tap(n => n[YOGA_NODE] && n[YOGA_NODE].freeRecursive());\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\n\nconst resolvePageDimensions = (page, fontStore) => R.ifElse(R.isNil, R.always(null), R.compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore)))(page);\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} root object\n * @returns {Object} root object with correct 'box' layout attributes\n */\n\n\nexports.resolvePageDimensions = resolvePageDimensions;\n\nconst resolveDimensions = (node, fontStore) => {\n  const mapChild = child => resolvePageDimensions(child, fontStore);\n\n  return R.evolve({\n    children: R.map(mapChild)\n  })(node);\n};\n\nvar _default = resolveDimensions;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}