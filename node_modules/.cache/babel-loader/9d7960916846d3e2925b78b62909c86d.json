{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nconst isType = R.propEq('type');\nconst isLink = isType(P.Link);\nconst isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {Boolean} has render prop?\n */\n\nconst hasRenderProp = R.hasPath(['props', 'render']);\n/**\n * Checks if all children of node are text instances\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\n\nconst hasTextInstanceChilds = R.compose(R.all(isTextInstance), R.propOr([], 'children'));\n/**\n * If the Link has a string child or render prop, substitute the instance by a Text,\n * that will ultimately render the inline Link via the textkit PDF renderer.\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\n\nconst resolveLinkSubstitution = node => R.evolve({\n  children: R.map(R.ifElse(R.both(isLink, R.either(hasRenderProp, hasTextInstanceChilds)), R.assoc('type', P.Text), resolveLinkSubstitution))\n})(node);\n\nvar _default = resolveLinkSubstitution;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/steps/resolveLinkSubstitution.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","P","isType","propEq","isLink","Link","isTextInstance","TextInstance","hasRenderProp","hasPath","hasTextInstanceChilds","compose","all","propOr","resolveLinkSubstitution","node","evolve","children","map","ifElse","both","either","assoc","Text","_default"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGL,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIK,CAAC,GAAGN,uBAAuB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,MAAMM,MAAM,GAAGF,CAAC,CAACG,MAAF,CAAS,MAAT,CAAf;AACA,MAAMC,MAAM,GAAGF,MAAM,CAACD,CAAC,CAACI,IAAH,CAArB;AACA,MAAMC,cAAc,GAAGJ,MAAM,CAACD,CAAC,CAACM,YAAH,CAA7B;AACA;;;;;;;AAOA,MAAMC,aAAa,GAAGR,CAAC,CAACS,OAAF,CAAU,CAAC,OAAD,EAAU,QAAV,CAAV,CAAtB;AACA;;;;;;;AAOA,MAAMC,qBAAqB,GAAGV,CAAC,CAACW,OAAF,CAAUX,CAAC,CAACY,GAAF,CAAMN,cAAN,CAAV,EAAiCN,CAAC,CAACa,MAAF,CAAS,EAAT,EAAa,UAAb,CAAjC,CAA9B;AACA;;;;;;;;AAQA,MAAMC,uBAAuB,GAAGC,IAAI,IAAIf,CAAC,CAACgB,MAAF,CAAS;AAC/CC,EAAAA,QAAQ,EAAEjB,CAAC,CAACkB,GAAF,CAAMlB,CAAC,CAACmB,MAAF,CAASnB,CAAC,CAACoB,IAAF,CAAOhB,MAAP,EAAeJ,CAAC,CAACqB,MAAF,CAASb,aAAT,EAAwBE,qBAAxB,CAAf,CAAT,EAAyEV,CAAC,CAACsB,KAAF,CAAQ,MAAR,EAAgBrB,CAAC,CAACsB,IAAlB,CAAzE,EAAkGT,uBAAlG,CAAN;AADqC,CAAT,EAErCC,IAFqC,CAAxC;;AAIA,IAAIS,QAAQ,GAAGV,uBAAf;AACAjB,OAAO,CAACE,OAAR,GAAkByB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nconst isType = R.propEq('type');\nconst isLink = isType(P.Link);\nconst isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {Boolean} has render prop?\n */\n\nconst hasRenderProp = R.hasPath(['props', 'render']);\n/**\n * Checks if all children of node are text instances\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\n\nconst hasTextInstanceChilds = R.compose(R.all(isTextInstance), R.propOr([], 'children'));\n/**\n * If the Link has a string child or render prop, substitute the instance by a Text,\n * that will ultimately render the inline Link via the textkit PDF renderer.\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\n\nconst resolveLinkSubstitution = node => R.evolve({\n  children: R.map(R.ifElse(R.both(isLink, R.either(hasRenderProp, hasTextInstanceChilds)), R.assoc('type', P.Text), resolveLinkSubstitution))\n})(node);\n\nvar _default = resolveLinkSubstitution;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}