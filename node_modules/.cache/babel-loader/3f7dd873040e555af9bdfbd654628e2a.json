{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n  if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n    return acc;\n  }\n\n  return [...acc, String.fromCharCode(codePoint)];\n}, []);\n\nconst ignoreChars = fragments => fragments.map(fragment => {\n  const charSubset = buildSubsetForFont(fragment.attributes.font);\n  const subsetRegex = new RegExp(charSubset.join('|'));\n  return {\n    string: fragment.string.replace(subsetRegex, ''),\n    attributes: fragment.attributes\n  };\n});\n\nvar _default = ignoreChars;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/text/ignoreChars.js"],"names":["exports","__esModule","default","IGNORABLE_CODEPOINTS","buildSubsetForFont","font","reduce","acc","codePoint","hasGlyphForCodePoint","String","fromCharCode","ignoreChars","fragments","map","fragment","charSubset","attributes","subsetRegex","RegExp","join","string","replace","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,oBAAoB,GAAG,CAAC,IAAD,EAAO;AACpC,IAD6B,CACxB;AADwB,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,IAAI,IAAIF,oBAAoB,CAACG,MAArB,CAA4B,CAACC,GAAD,EAAMC,SAAN,KAAoB;AACjF,MAAIH,IAAI,CAACI,oBAAL,IAA6BJ,IAAI,CAACI,oBAAL,CAA0BD,SAA1B,CAAjC,EAAuE;AACrE,WAAOD,GAAP;AACD;;AAED,SAAO,CAAC,GAAGA,GAAJ,EAASG,MAAM,CAACC,YAAP,CAAoBH,SAApB,CAAT,CAAP;AACD,CANkC,EAMhC,EANgC,CAAnC;;AAQA,MAAMI,WAAW,GAAGC,SAAS,IAAIA,SAAS,CAACC,GAAV,CAAcC,QAAQ,IAAI;AACzD,QAAMC,UAAU,GAAGZ,kBAAkB,CAACW,QAAQ,CAACE,UAAT,CAAoBZ,IAArB,CAArC;AACA,QAAMa,WAAW,GAAG,IAAIC,MAAJ,CAAWH,UAAU,CAACI,IAAX,CAAgB,GAAhB,CAAX,CAApB;AACA,SAAO;AACLC,IAAAA,MAAM,EAAEN,QAAQ,CAACM,MAAT,CAAgBC,OAAhB,CAAwBJ,WAAxB,EAAqC,EAArC,CADH;AAELD,IAAAA,UAAU,EAAEF,QAAQ,CAACE;AAFhB,GAAP;AAID,CAPgC,CAAjC;;AASA,IAAIM,QAAQ,GAAGX,WAAf;AACAZ,OAAO,CAACE,OAAR,GAAkBqB,QAAlB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n  if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n    return acc;\n  }\n\n  return [...acc, String.fromCharCode(codePoint)];\n}, []);\n\nconst ignoreChars = fragments => fragments.map(fragment => {\n  const charSubset = buildSubsetForFont(fragment.attributes.font);\n  const subsetRegex = new RegExp(charSubset.join('|'));\n  return {\n    string: fragment.string.replace(subsetRegex, ''),\n    attributes: fragment.attributes\n  };\n});\n\nvar _default = ignoreChars;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}