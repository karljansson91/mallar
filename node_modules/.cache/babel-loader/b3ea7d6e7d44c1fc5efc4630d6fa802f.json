{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nvar _getRatio = _interopRequireDefault(require(\"./getRatio\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _isHeightAuto = _interopRequireDefault(require(\"../page/isHeightAuto\"));\n\nconst SAFETY_HEIGHT = 10;\n/**\n * Yoga image measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} image width and height\n */\n\nconst measureImage = (page, node, width, widthMode, height, heightMode) => {\n  const imageRatio = (0, _getRatio.default)(node);\n  const imageMargin = (0, _getMargin.default)(node);\n  const pagePadding = (0, _getPadding.default)(page);\n  const pageArea = (0, _isHeightAuto.default)(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT; // Skip measure if image data not present yet\n\n  if (!node.image) return {\n    width: 0,\n    height: 0\n  };\n\n  if (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_EXACTLY && heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_UNDEFINED) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(pageArea, scaledHeight)\n    };\n  }\n\n  if (heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_EXACTLY && (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST || widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_UNDEFINED)) {\n    return {\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n\n  if (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_EXACTLY && heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(height, pageArea, scaledHeight)\n    };\n  }\n\n  if (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST && heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST) {\n    if (imageRatio > 1) {\n      return {\n        width,\n        height: Math.min(width / imageRatio, height)\n      };\n    }\n\n    return {\n      height,\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n\n  return {\n    height,\n    width\n  };\n};\n\nvar _default = R.curryN(6, measureImage);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/image/measureImage.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_yogaLayoutPrebuilt","_getRatio","_getMargin","_getPadding","_isHeightAuto","SAFETY_HEIGHT","measureImage","page","node","width","widthMode","height","heightMode","imageRatio","imageMargin","pagePadding","pageArea","Infinity","box","paddingTop","paddingBottom","marginTop","marginBottom","image","MEASURE_MODE_EXACTLY","MEASURE_MODE_UNDEFINED","scaledHeight","Math","min","MEASURE_MODE_AT_MOST","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nvar _getRatio = _interopRequireDefault(require(\"./getRatio\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _isHeightAuto = _interopRequireDefault(require(\"../page/isHeightAuto\"));\n\nconst SAFETY_HEIGHT = 10;\n/**\n * Yoga image measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} image width and height\n */\n\nconst measureImage = (page, node, width, widthMode, height, heightMode) => {\n  const imageRatio = (0, _getRatio.default)(node);\n  const imageMargin = (0, _getMargin.default)(node);\n  const pagePadding = (0, _getPadding.default)(page);\n  const pageArea = (0, _isHeightAuto.default)(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT; // Skip measure if image data not present yet\n\n  if (!node.image) return {\n    width: 0,\n    height: 0\n  };\n\n  if (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_EXACTLY && heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_UNDEFINED) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(pageArea, scaledHeight)\n    };\n  }\n\n  if (heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_EXACTLY && (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST || widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_UNDEFINED)) {\n    return {\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n\n  if (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_EXACTLY && heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(height, pageArea, scaledHeight)\n    };\n  }\n\n  if (widthMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST && heightMode === _yogaLayoutPrebuilt.default.MEASURE_MODE_AT_MOST) {\n    if (imageRatio > 1) {\n      return {\n        width,\n        height: Math.min(width / imageRatio, height)\n      };\n    }\n\n    return {\n      height,\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n\n  return {\n    height,\n    width\n  };\n};\n\nvar _default = R.curryN(6, measureImage);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}