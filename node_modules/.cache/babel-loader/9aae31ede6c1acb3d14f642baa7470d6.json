{"ast":null,"code":"// Generated by CoffeeScript 1.12.1\n(function () {\n  var PDFFont;\n  PDFFont = require('../font');\n  module.exports = {\n    initFonts: function () {\n      this._fontFamilies = {};\n      this._fontCount = 0;\n      this._fontSize = 12;\n      this._font = null;\n      this._registeredFonts = {};\n      return this.font('Helvetica');\n    },\n    font: function (src, family, size) {\n      var cacheKey, font, id, ref;\n\n      if (typeof family === 'number') {\n        size = family;\n        family = null;\n      }\n\n      if (typeof src === 'string' && this._registeredFonts[src]) {\n        cacheKey = src;\n        ref = this._registeredFonts[src], src = ref.src, family = ref.family;\n      } else {\n        cacheKey = family || src;\n\n        if (typeof cacheKey !== 'string') {\n          cacheKey = null;\n        }\n      }\n\n      if (size != null) {\n        this.fontSize(size);\n      }\n\n      if (font = this._fontFamilies[cacheKey]) {\n        this._font = font;\n        return this;\n      }\n\n      id = 'F' + ++this._fontCount;\n      this._font = PDFFont.open(this, src, family, id);\n\n      if (font = this._fontFamilies[this._font.name]) {\n        this._font = font;\n        return this;\n      }\n\n      if (cacheKey) {\n        this._fontFamilies[cacheKey] = this._font;\n      }\n\n      this._fontFamilies[this._font.name] = this._font;\n      return this;\n    },\n    fontSize: function (_fontSize) {\n      this._fontSize = _fontSize;\n      return this;\n    },\n    currentLineHeight: function (includeGap) {\n      if (includeGap == null) {\n        includeGap = false;\n      }\n\n      return this._font.lineHeight(this._fontSize, includeGap);\n    },\n    registerFont: function (name, src, family) {\n      this._registeredFonts[name] = {\n        src: src,\n        family: family\n      };\n      return this;\n    }\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/kaja/Code/mallar/node_modules/pdfkit/js/mixins/fonts.js"],"names":["PDFFont","require","module","exports","initFonts","_fontFamilies","_fontCount","_fontSize","_font","_registeredFonts","font","src","family","size","cacheKey","id","ref","fontSize","open","name","currentLineHeight","includeGap","lineHeight","registerFont","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.1\n(function() {\n  var PDFFont;\n\n  PDFFont = require('../font');\n\n  module.exports = {\n    initFonts: function() {\n      this._fontFamilies = {};\n      this._fontCount = 0;\n      this._fontSize = 12;\n      this._font = null;\n      this._registeredFonts = {};\n      return this.font('Helvetica');\n    },\n    font: function(src, family, size) {\n      var cacheKey, font, id, ref;\n      if (typeof family === 'number') {\n        size = family;\n        family = null;\n      }\n      if (typeof src === 'string' && this._registeredFonts[src]) {\n        cacheKey = src;\n        ref = this._registeredFonts[src], src = ref.src, family = ref.family;\n      } else {\n        cacheKey = family || src;\n        if (typeof cacheKey !== 'string') {\n          cacheKey = null;\n        }\n      }\n      if (size != null) {\n        this.fontSize(size);\n      }\n      if (font = this._fontFamilies[cacheKey]) {\n        this._font = font;\n        return this;\n      }\n      id = 'F' + (++this._fontCount);\n      this._font = PDFFont.open(this, src, family, id);\n      if (font = this._fontFamilies[this._font.name]) {\n        this._font = font;\n        return this;\n      }\n      if (cacheKey) {\n        this._fontFamilies[cacheKey] = this._font;\n      }\n      this._fontFamilies[this._font.name] = this._font;\n      return this;\n    },\n    fontSize: function(_fontSize) {\n      this._fontSize = _fontSize;\n      return this;\n    },\n    currentLineHeight: function(includeGap) {\n      if (includeGap == null) {\n        includeGap = false;\n      }\n      return this._font.lineHeight(this._fontSize, includeGap);\n    },\n    registerFont: function(name, src, family) {\n      this._registeredFonts[name] = {\n        src: src,\n        family: family\n      };\n      return this;\n    }\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}