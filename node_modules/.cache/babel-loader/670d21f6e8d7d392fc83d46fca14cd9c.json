{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nvar _upperFirst = _interopRequireDefault(require(\"../utils/upperFirst\"));\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {String} specific align property\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\n\nconst setAlign = attr => value => R.tap(node => {\n  const yogaNode = node._yogaNode;\n\n  if (yogaNode) {\n    const yogaValue = R.cond([[R.equals('flex-start'), R.always(_yogaLayoutPrebuilt.default.ALIGN_FLEX_START)], [R.equals('center'), R.always(_yogaLayoutPrebuilt.default.ALIGN_CENTER)], [R.equals('flex-end'), R.always(_yogaLayoutPrebuilt.default.ALIGN_FLEX_END)], [R.equals('stretch'), R.always(_yogaLayoutPrebuilt.default.ALIGN_STRETCH)], [R.equals('baseline'), R.always(_yogaLayoutPrebuilt.default.ALIGN_BASELINE)], [R.equals('space-between'), R.always(_yogaLayoutPrebuilt.default.ALIGN_SPACE_BETWEEN)], [R.equals('space-around'), R.always(_yogaLayoutPrebuilt.default.ALIGN_SPACE_AROUND)], [R.T, R.always(attr === 'items' ? _yogaLayoutPrebuilt.default.ALIGN_STRETCH : _yogaLayoutPrebuilt.default.ALIGN_AUTO)]])(value);\n    yogaNode[`setAlign${(0, _upperFirst.default)(attr)}`](yogaValue);\n  }\n});\n\nvar _default = setAlign;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/node/setAlign.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_yogaLayoutPrebuilt","_upperFirst","setAlign","attr","value","tap","node","yogaNode","_yogaNode","yogaValue","cond","equals","always","ALIGN_FLEX_START","ALIGN_CENTER","ALIGN_FLEX_END","ALIGN_STRETCH","ALIGN_BASELINE","ALIGN_SPACE_BETWEEN","ALIGN_SPACE_AROUND","T","ALIGN_AUTO","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,mBAAmB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAhD;;AAEA,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAxC;AAEA;;;;;;;;;;AAQA,MAAMQ,QAAQ,GAAGC,IAAI,IAAIC,KAAK,IAAIL,CAAC,CAACM,GAAF,CAAMC,IAAI,IAAI;AAC9C,QAAMC,QAAQ,GAAGD,IAAI,CAACE,SAAtB;;AAEA,MAAID,QAAJ,EAAc;AACZ,UAAME,SAAS,GAAGV,CAAC,CAACW,IAAF,CAAO,CAAC,CAACX,CAAC,CAACY,MAAF,CAAS,YAAT,CAAD,EAAyBZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4Be,gBAArC,CAAzB,CAAD,EAAmF,CAACd,CAAC,CAACY,MAAF,CAAS,QAAT,CAAD,EAAqBZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4BgB,YAArC,CAArB,CAAnF,EAA6J,CAACf,CAAC,CAACY,MAAF,CAAS,UAAT,CAAD,EAAuBZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4BiB,cAArC,CAAvB,CAA7J,EAA2O,CAAChB,CAAC,CAACY,MAAF,CAAS,SAAT,CAAD,EAAsBZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4BkB,aAArC,CAAtB,CAA3O,EAAuT,CAACjB,CAAC,CAACY,MAAF,CAAS,UAAT,CAAD,EAAuBZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4BmB,cAArC,CAAvB,CAAvT,EAAqY,CAAClB,CAAC,CAACY,MAAF,CAAS,eAAT,CAAD,EAA4BZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4BoB,mBAArC,CAA5B,CAArY,EAA6d,CAACnB,CAAC,CAACY,MAAF,CAAS,cAAT,CAAD,EAA2BZ,CAAC,CAACa,MAAF,CAASZ,mBAAmB,CAACF,OAApB,CAA4BqB,kBAArC,CAA3B,CAA7d,EAAmjB,CAACpB,CAAC,CAACqB,CAAH,EAAMrB,CAAC,CAACa,MAAF,CAAST,IAAI,KAAK,OAAT,GAAmBH,mBAAmB,CAACF,OAApB,CAA4BkB,aAA/C,GAA+DhB,mBAAmB,CAACF,OAApB,CAA4BuB,UAApG,CAAN,CAAnjB,CAAP,EAAmrBjB,KAAnrB,CAAlB;AACAG,IAAAA,QAAQ,CAAE,WAAU,CAAC,GAAGN,WAAW,CAACH,OAAhB,EAAyBK,IAAzB,CAA+B,EAA3C,CAAR,CAAsDM,SAAtD;AACD;AACF,CAPiC,CAAlC;;AASA,IAAIa,QAAQ,GAAGpB,QAAf;AACAN,OAAO,CAACE,OAAR,GAAkBwB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nvar _upperFirst = _interopRequireDefault(require(\"../utils/upperFirst\"));\n\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {String} specific align property\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlign = attr => value => R.tap(node => {\n  const yogaNode = node._yogaNode;\n\n  if (yogaNode) {\n    const yogaValue = R.cond([[R.equals('flex-start'), R.always(_yogaLayoutPrebuilt.default.ALIGN_FLEX_START)], [R.equals('center'), R.always(_yogaLayoutPrebuilt.default.ALIGN_CENTER)], [R.equals('flex-end'), R.always(_yogaLayoutPrebuilt.default.ALIGN_FLEX_END)], [R.equals('stretch'), R.always(_yogaLayoutPrebuilt.default.ALIGN_STRETCH)], [R.equals('baseline'), R.always(_yogaLayoutPrebuilt.default.ALIGN_BASELINE)], [R.equals('space-between'), R.always(_yogaLayoutPrebuilt.default.ALIGN_SPACE_BETWEEN)], [R.equals('space-around'), R.always(_yogaLayoutPrebuilt.default.ALIGN_SPACE_AROUND)], [R.T, R.always(attr === 'items' ? _yogaLayoutPrebuilt.default.ALIGN_STRETCH : _yogaLayoutPrebuilt.default.ALIGN_AUTO)]])(value);\n    yogaNode[`setAlign${(0, _upperFirst.default)(attr)}`](yogaValue);\n  }\n});\n\nvar _default = setAlign;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}