{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nconst isRow = R.equals('row');\nconst isRowReverse = R.equals('row-reverse');\nconst isColumnReverse = R.equals('column-reverse');\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {String} flex direction value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\nconst setFlexDirection = value => R.tap(node => {\n  const yogaNode = node._yogaNode;\n\n  if (yogaNode) {\n    const yogaValue = R.cond([[isRow, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_ROW)], [isRowReverse, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_ROW_REVERSE)], [isColumnReverse, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_COLUMN_REVERSE)], [R.T, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_COLUMN)]])(value);\n    yogaNode.setFlexDirection(yogaValue);\n  }\n});\n\nvar _default = setFlexDirection;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/node/setFlexDirection.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_yogaLayoutPrebuilt","isRow","equals","isRowReverse","isColumnReverse","setFlexDirection","value","tap","node","yogaNode","_yogaNode","yogaValue","cond","always","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","FLEX_DIRECTION_COLUMN_REVERSE","T","FLEX_DIRECTION_COLUMN","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,mBAAmB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAhD;;AAEA,MAAMO,KAAK,GAAGF,CAAC,CAACG,MAAF,CAAS,KAAT,CAAd;AACA,MAAMC,YAAY,GAAGJ,CAAC,CAACG,MAAF,CAAS,aAAT,CAArB;AACA,MAAME,eAAe,GAAGL,CAAC,CAACG,MAAF,CAAS,gBAAT,CAAxB;AACA;;;;;;;;AAQA,MAAMG,gBAAgB,GAAGC,KAAK,IAAIP,CAAC,CAACQ,GAAF,CAAMC,IAAI,IAAI;AAC9C,QAAMC,QAAQ,GAAGD,IAAI,CAACE,SAAtB;;AAEA,MAAID,QAAJ,EAAc;AACZ,UAAME,SAAS,GAAGZ,CAAC,CAACa,IAAF,CAAO,CAAC,CAACX,KAAD,EAAQF,CAAC,CAACc,MAAF,CAASb,mBAAmB,CAACF,OAApB,CAA4BgB,kBAArC,CAAR,CAAD,EAAoE,CAACX,YAAD,EAAeJ,CAAC,CAACc,MAAF,CAASb,mBAAmB,CAACF,OAApB,CAA4BiB,0BAArC,CAAf,CAApE,EAAsJ,CAACX,eAAD,EAAkBL,CAAC,CAACc,MAAF,CAASb,mBAAmB,CAACF,OAApB,CAA4BkB,6BAArC,CAAlB,CAAtJ,EAA8O,CAACjB,CAAC,CAACkB,CAAH,EAAMlB,CAAC,CAACc,MAAF,CAASb,mBAAmB,CAACF,OAApB,CAA4BoB,qBAArC,CAAN,CAA9O,CAAP,EAA0TZ,KAA1T,CAAlB;AACAG,IAAAA,QAAQ,CAACJ,gBAAT,CAA0BM,SAA1B;AACD;AACF,CAPiC,CAAlC;;AASA,IAAIQ,QAAQ,GAAGd,gBAAf;AACAT,OAAO,CAACE,OAAR,GAAkBqB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yogaLayoutPrebuilt = _interopRequireDefault(require(\"yoga-layout-prebuilt\"));\n\nconst isRow = R.equals('row');\nconst isRowReverse = R.equals('row-reverse');\nconst isColumnReverse = R.equals('column-reverse');\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {String} flex direction value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\nconst setFlexDirection = value => R.tap(node => {\n  const yogaNode = node._yogaNode;\n\n  if (yogaNode) {\n    const yogaValue = R.cond([[isRow, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_ROW)], [isRowReverse, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_ROW_REVERSE)], [isColumnReverse, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_COLUMN_REVERSE)], [R.T, R.always(_yogaLayoutPrebuilt.default.FLEX_DIRECTION_COLUMN)]])(value);\n    yogaNode.setFlexDirection(yogaValue);\n  }\n});\n\nvar _default = setFlexDirection;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}