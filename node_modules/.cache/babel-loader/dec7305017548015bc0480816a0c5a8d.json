{"ast":null,"code":"// Generated by CoffeeScript 1.12.1\n(function () {\n  var PNG, PNGImage, zlib;\n  zlib = require('zlib');\n  PNG = require('png-js');\n\n  PNGImage = function () {\n    function PNGImage(data, label) {\n      this.label = label;\n      this.image = new PNG(data);\n      this.width = this.image.width;\n      this.height = this.image.height;\n      this.imgData = this.image.imgData;\n      this.obj = null;\n    }\n\n    PNGImage.prototype.embed = function (document) {\n      var k, len1, mask, palette, params, rgb, val, x;\n      this.document = document;\n\n      if (this.obj) {\n        return;\n      }\n\n      this.obj = this.document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.image.bits,\n        Width: this.width,\n        Height: this.height,\n        Filter: 'FlateDecode'\n      });\n\n      if (!this.image.hasAlphaChannel) {\n        params = this.document.ref({\n          Predictor: 15,\n          Colors: this.image.colors,\n          BitsPerComponent: this.image.bits,\n          Columns: this.width\n        });\n        this.obj.data['DecodeParms'] = params;\n        params.end();\n      }\n\n      if (this.image.palette.length === 0) {\n        this.obj.data['ColorSpace'] = this.image.colorSpace;\n      } else {\n        palette = this.document.ref();\n        palette.end(new Buffer(this.image.palette));\n        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];\n      }\n\n      if (this.image.transparency.grayscale) {\n        val = this.image.transparency.greyscale;\n        return this.obj.data['Mask'] = [val, val];\n      } else if (this.image.transparency.rgb) {\n        rgb = this.image.transparency.rgb;\n        mask = [];\n\n        for (k = 0, len1 = rgb.length; k < len1; k++) {\n          x = rgb[k];\n          mask.push(x, x);\n        }\n\n        return this.obj.data['Mask'] = mask;\n      } else if (this.image.transparency.indexed) {\n        return this.loadIndexedAlphaChannel();\n      } else if (this.image.hasAlphaChannel) {\n        return this.splitAlphaChannel();\n      } else {\n        return this.finalize();\n      }\n    };\n\n    PNGImage.prototype.finalize = function () {\n      var sMask;\n\n      if (this.alphaChannel) {\n        sMask = this.document.ref({\n          Type: 'XObject',\n          Subtype: 'Image',\n          Height: this.height,\n          Width: this.width,\n          BitsPerComponent: 8,\n          Filter: 'FlateDecode',\n          ColorSpace: 'DeviceGray',\n          Decode: [0, 1]\n        });\n        sMask.end(this.alphaChannel);\n        this.obj.data['SMask'] = sMask;\n      }\n\n      this.obj.end(this.imgData);\n      this.image = null;\n      return this.imgData = null;\n    };\n\n    PNGImage.prototype.splitAlphaChannel = function () {\n      return this.image.decodePixels(function (_this) {\n        return function (pixels) {\n          var a, alphaChannel, colorByteSize, done, i, imgData, len, p, pixelCount;\n          colorByteSize = _this.image.colors * _this.image.bits / 8;\n          pixelCount = _this.width * _this.height;\n          imgData = new Buffer(pixelCount * colorByteSize);\n          alphaChannel = new Buffer(pixelCount);\n          i = p = a = 0;\n          len = pixels.length;\n\n          while (i < len) {\n            imgData[p++] = pixels[i++];\n            imgData[p++] = pixels[i++];\n            imgData[p++] = pixels[i++];\n            alphaChannel[a++] = pixels[i++];\n          }\n\n          done = 0;\n          zlib.deflate(imgData, function (err, imgData1) {\n            _this.imgData = imgData1;\n\n            if (err) {\n              throw err;\n            }\n\n            if (++done === 2) {\n              return _this.finalize();\n            }\n          });\n          return zlib.deflate(alphaChannel, function (err, alphaChannel1) {\n            _this.alphaChannel = alphaChannel1;\n\n            if (err) {\n              throw err;\n            }\n\n            if (++done === 2) {\n              return _this.finalize();\n            }\n          });\n        };\n      }(this));\n    };\n\n    PNGImage.prototype.loadIndexedAlphaChannel = function (fn) {\n      var transparency;\n      transparency = this.image.transparency.indexed;\n      return this.image.decodePixels(function (_this) {\n        return function (pixels) {\n          var alphaChannel, i, j, k, ref;\n          alphaChannel = new Buffer(_this.width * _this.height);\n          i = 0;\n\n          for (j = k = 0, ref = pixels.length; k < ref; j = k += 1) {\n            alphaChannel[i++] = transparency[pixels[j]];\n          }\n\n          return zlib.deflate(alphaChannel, function (err, alphaChannel1) {\n            _this.alphaChannel = alphaChannel1;\n\n            if (err) {\n              throw err;\n            }\n\n            return _this.finalize();\n          });\n        };\n      }(this));\n    };\n\n    return PNGImage;\n  }();\n\n  module.exports = PNGImage;\n}).call(this);","map":{"version":3,"sources":["/Users/kaja/Code/mallar/node_modules/pdfkit/js/image/png.js"],"names":["PNG","PNGImage","zlib","require","data","label","image","width","height","imgData","obj","prototype","embed","document","k","len1","mask","palette","params","rgb","val","x","ref","Type","Subtype","BitsPerComponent","bits","Width","Height","Filter","hasAlphaChannel","Predictor","Colors","colors","Columns","end","length","colorSpace","Buffer","transparency","grayscale","greyscale","push","indexed","loadIndexedAlphaChannel","splitAlphaChannel","finalize","sMask","alphaChannel","ColorSpace","Decode","decodePixels","_this","pixels","a","colorByteSize","done","i","len","p","pixelCount","deflate","err","imgData1","alphaChannel1","fn","j","module","exports","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.1\n(function() {\n  var PNG, PNGImage, zlib;\n\n  zlib = require('zlib');\n\n  PNG = require('png-js');\n\n  PNGImage = (function() {\n    function PNGImage(data, label) {\n      this.label = label;\n      this.image = new PNG(data);\n      this.width = this.image.width;\n      this.height = this.image.height;\n      this.imgData = this.image.imgData;\n      this.obj = null;\n    }\n\n    PNGImage.prototype.embed = function(document) {\n      var k, len1, mask, palette, params, rgb, val, x;\n      this.document = document;\n      if (this.obj) {\n        return;\n      }\n      this.obj = this.document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.image.bits,\n        Width: this.width,\n        Height: this.height,\n        Filter: 'FlateDecode'\n      });\n      if (!this.image.hasAlphaChannel) {\n        params = this.document.ref({\n          Predictor: 15,\n          Colors: this.image.colors,\n          BitsPerComponent: this.image.bits,\n          Columns: this.width\n        });\n        this.obj.data['DecodeParms'] = params;\n        params.end();\n      }\n      if (this.image.palette.length === 0) {\n        this.obj.data['ColorSpace'] = this.image.colorSpace;\n      } else {\n        palette = this.document.ref();\n        palette.end(new Buffer(this.image.palette));\n        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', (this.image.palette.length / 3) - 1, palette];\n      }\n      if (this.image.transparency.grayscale) {\n        val = this.image.transparency.greyscale;\n        return this.obj.data['Mask'] = [val, val];\n      } else if (this.image.transparency.rgb) {\n        rgb = this.image.transparency.rgb;\n        mask = [];\n        for (k = 0, len1 = rgb.length; k < len1; k++) {\n          x = rgb[k];\n          mask.push(x, x);\n        }\n        return this.obj.data['Mask'] = mask;\n      } else if (this.image.transparency.indexed) {\n        return this.loadIndexedAlphaChannel();\n      } else if (this.image.hasAlphaChannel) {\n        return this.splitAlphaChannel();\n      } else {\n        return this.finalize();\n      }\n    };\n\n    PNGImage.prototype.finalize = function() {\n      var sMask;\n      if (this.alphaChannel) {\n        sMask = this.document.ref({\n          Type: 'XObject',\n          Subtype: 'Image',\n          Height: this.height,\n          Width: this.width,\n          BitsPerComponent: 8,\n          Filter: 'FlateDecode',\n          ColorSpace: 'DeviceGray',\n          Decode: [0, 1]\n        });\n        sMask.end(this.alphaChannel);\n        this.obj.data['SMask'] = sMask;\n      }\n      this.obj.end(this.imgData);\n      this.image = null;\n      return this.imgData = null;\n    };\n\n    PNGImage.prototype.splitAlphaChannel = function() {\n      return this.image.decodePixels((function(_this) {\n        return function(pixels) {\n          var a, alphaChannel, colorByteSize, done, i, imgData, len, p, pixelCount;\n          colorByteSize = _this.image.colors * _this.image.bits / 8;\n          pixelCount = _this.width * _this.height;\n          imgData = new Buffer(pixelCount * colorByteSize);\n          alphaChannel = new Buffer(pixelCount);\n          i = p = a = 0;\n          len = pixels.length;\n          while (i < len) {\n            imgData[p++] = pixels[i++];\n            imgData[p++] = pixels[i++];\n            imgData[p++] = pixels[i++];\n            alphaChannel[a++] = pixels[i++];\n          }\n          done = 0;\n          zlib.deflate(imgData, function(err, imgData1) {\n            _this.imgData = imgData1;\n            if (err) {\n              throw err;\n            }\n            if (++done === 2) {\n              return _this.finalize();\n            }\n          });\n          return zlib.deflate(alphaChannel, function(err, alphaChannel1) {\n            _this.alphaChannel = alphaChannel1;\n            if (err) {\n              throw err;\n            }\n            if (++done === 2) {\n              return _this.finalize();\n            }\n          });\n        };\n      })(this));\n    };\n\n    PNGImage.prototype.loadIndexedAlphaChannel = function(fn) {\n      var transparency;\n      transparency = this.image.transparency.indexed;\n      return this.image.decodePixels((function(_this) {\n        return function(pixels) {\n          var alphaChannel, i, j, k, ref;\n          alphaChannel = new Buffer(_this.width * _this.height);\n          i = 0;\n          for (j = k = 0, ref = pixels.length; k < ref; j = k += 1) {\n            alphaChannel[i++] = transparency[pixels[j]];\n          }\n          return zlib.deflate(alphaChannel, function(err, alphaChannel1) {\n            _this.alphaChannel = alphaChannel1;\n            if (err) {\n              throw err;\n            }\n            return _this.finalize();\n          });\n        };\n      })(this));\n    };\n\n    return PNGImage;\n\n  })();\n\n  module.exports = PNGImage;\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}