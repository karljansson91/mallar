{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _emoji = _interopRequireDefault(require(\"../text/emoji\"));\n\nvar _fetchImage = _interopRequireDefault(require(\"../image/fetchImage\"));\n\nconst isImage = R.propEq('type', P.Image);\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} root node\n * @returns {Array} asset promises\n */\n\nconst fetchAssets = (fontStore, node) => {\n  const promises = [];\n  const listToExplore = node.children.slice(0);\n  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n\n  while (listToExplore.length > 0) {\n    const n = listToExplore.shift();\n\n    if (isImage(n)) {\n      promises.push((0, _fetchImage.default)(n));\n    }\n\n    if (fontStore && n.style && n.style.fontFamily) {\n      promises.push(fontStore.load(n.style));\n    }\n\n    if (typeof n === 'string') {\n      promises.push(...(0, _emoji.default)(n, emojiSource));\n    }\n\n    if (typeof n.value === 'string') {\n      promises.push(...(0, _emoji.default)(n.value, emojiSource));\n    }\n\n    if (n.children) {\n      n.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n\n  return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} fontStore font store\n * @param {Object} root node\n * @returns {Object} root node\n */\n\n\nconst resolveAssets = (node, fontStore) => R.compose(R.then(R.always(node)), p => Promise.all(p), fetchAssets)(fontStore, node);\n\nvar _default = resolveAssets;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/steps/resolveAssets.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","P","_emoji","_fetchImage","isImage","propEq","Image","fetchAssets","fontStore","node","promises","listToExplore","children","slice","emojiSource","getEmojiSource","length","n","shift","push","style","fontFamily","load","value","forEach","childNode","resolveAssets","compose","then","always","p","Promise","all","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,CAAC,GAAGL,uBAAuB,CAACD,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,IAAIO,MAAM,GAAGR,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAnC;;AAEA,IAAIQ,WAAW,GAAGT,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAxC;;AAEA,MAAMS,OAAO,GAAGJ,CAAC,CAACK,MAAF,CAAS,MAAT,EAAiBJ,CAAC,CAACK,KAAnB,CAAhB;AACA;;;;;;;AAOA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACvC,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,aAAa,GAAGF,IAAI,CAACG,QAAL,CAAcC,KAAd,CAAoB,CAApB,CAAtB;AACA,QAAMC,WAAW,GAAGN,SAAS,GAAGA,SAAS,CAACO,cAAV,EAAH,GAAgC,IAA7D;;AAEA,SAAOJ,aAAa,CAACK,MAAd,GAAuB,CAA9B,EAAiC;AAC/B,UAAMC,CAAC,GAAGN,aAAa,CAACO,KAAd,EAAV;;AAEA,QAAId,OAAO,CAACa,CAAD,CAAX,EAAgB;AACdP,MAAAA,QAAQ,CAACS,IAAT,CAAc,CAAC,GAAGhB,WAAW,CAACJ,OAAhB,EAAyBkB,CAAzB,CAAd;AACD;;AAED,QAAIT,SAAS,IAAIS,CAAC,CAACG,KAAf,IAAwBH,CAAC,CAACG,KAAF,CAAQC,UAApC,EAAgD;AAC9CX,MAAAA,QAAQ,CAACS,IAAT,CAAcX,SAAS,CAACc,IAAV,CAAeL,CAAC,CAACG,KAAjB,CAAd;AACD;;AAED,QAAI,OAAOH,CAAP,KAAa,QAAjB,EAA2B;AACzBP,MAAAA,QAAQ,CAACS,IAAT,CAAc,GAAG,CAAC,GAAGjB,MAAM,CAACH,OAAX,EAAoBkB,CAApB,EAAuBH,WAAvB,CAAjB;AACD;;AAED,QAAI,OAAOG,CAAC,CAACM,KAAT,KAAmB,QAAvB,EAAiC;AAC/Bb,MAAAA,QAAQ,CAACS,IAAT,CAAc,GAAG,CAAC,GAAGjB,MAAM,CAACH,OAAX,EAAoBkB,CAAC,CAACM,KAAtB,EAA6BT,WAA7B,CAAjB;AACD;;AAED,QAAIG,CAAC,CAACL,QAAN,EAAgB;AACdK,MAAAA,CAAC,CAACL,QAAF,CAAWY,OAAX,CAAmBC,SAAS,IAAI;AAC9Bd,QAAAA,aAAa,CAACQ,IAAd,CAAmBM,SAAnB;AACD,OAFD;AAGD;AACF;;AAED,SAAOf,QAAP;AACD,CAhCD;AAiCA;;;;;;;;;;AAUA,MAAMgB,aAAa,GAAG,CAACjB,IAAD,EAAOD,SAAP,KAAqBR,CAAC,CAAC2B,OAAF,CAAU3B,CAAC,CAAC4B,IAAF,CAAO5B,CAAC,CAAC6B,MAAF,CAASpB,IAAT,CAAP,CAAV,EAAkCqB,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAvC,EAAuDvB,WAAvD,EAAoEC,SAApE,EAA+EC,IAA/E,CAA3C;;AAEA,IAAIwB,QAAQ,GAAGP,aAAf;AACA7B,OAAO,CAACE,OAAR,GAAkBkC,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _emoji = _interopRequireDefault(require(\"../text/emoji\"));\n\nvar _fetchImage = _interopRequireDefault(require(\"../image/fetchImage\"));\n\nconst isImage = R.propEq('type', P.Image);\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} root node\n * @returns {Array} asset promises\n */\n\nconst fetchAssets = (fontStore, node) => {\n  const promises = [];\n  const listToExplore = node.children.slice(0);\n  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n\n  while (listToExplore.length > 0) {\n    const n = listToExplore.shift();\n\n    if (isImage(n)) {\n      promises.push((0, _fetchImage.default)(n));\n    }\n\n    if (fontStore && n.style && n.style.fontFamily) {\n      promises.push(fontStore.load(n.style));\n    }\n\n    if (typeof n === 'string') {\n      promises.push(...(0, _emoji.default)(n, emojiSource));\n    }\n\n    if (typeof n.value === 'string') {\n      promises.push(...(0, _emoji.default)(n.value, emojiSource));\n    }\n\n    if (n.children) {\n      n.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n\n  return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} fontStore font store\n * @param {Object} root node\n * @returns {Object} root node\n */\n\n\nconst resolveAssets = (node, fontStore) => R.compose(R.then(R.always(node)), p => Promise.all(p), fetchAssets)(fontStore, node);\n\nvar _default = resolveAssets;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}