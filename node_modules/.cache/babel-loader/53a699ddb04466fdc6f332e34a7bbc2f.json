{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _colors = require(\"@react-pdf/stylesheet/lib/colors\");\n\nvar _layoutText = _interopRequireDefault(require(\"../svg/layoutText\"));\n\nvar _replaceDefs = _interopRequireDefault(require(\"../svg/replaceDefs\"));\n\nvar _getContainer = _interopRequireDefault(require(\"../svg/getContainer\"));\n\nvar _parseViewbox = _interopRequireDefault(require(\"../svg/parseViewbox\"));\n\nvar _inheritProps = _interopRequireDefault(require(\"../svg/inheritProps\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n\nvar _parseAspectRatio = _interopRequireDefault(require(\"../svg/parseAspectRatio\"));\n\nconst STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray'];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isType = R.propEq('type');\nconst isSvg = isType(P.Svg);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n\nconst transformPercent = container => R.mapObjIndexed((value, key) => {\n  const match = (0, _matchPercent.default)(value);\n\n  if (match && VERTICAL_PROPS.includes(key)) {\n    return match.percent * container.height;\n  }\n\n  if (match && HORIZONTAL_PROPS.includes(key)) {\n    return match.percent * container.width;\n  }\n\n  return value;\n});\n\nconst parsePercent = value => {\n  const match = (0, _matchPercent.default)(value);\n  return match ? match.percent : parseFloat(value);\n};\n\nconst parseProps = container => R.compose(R.evolve({\n  props: R.o(R.evolve({\n    x: parseFloat,\n    x1: parseFloat,\n    x2: parseFloat,\n    y: parseFloat,\n    y1: parseFloat,\n    y2: parseFloat,\n    r: parseFloat,\n    rx: parseFloat,\n    ry: parseFloat,\n    cx: parseFloat,\n    cy: parseFloat,\n    width: parseFloat,\n    height: parseFloat,\n    offset: parsePercent,\n    fill: _colors.transformColor,\n    opacity: parsePercent,\n    stroke: _colors.transformColor,\n    stopOpacity: parsePercent,\n    stopColor: _colors.transformColor\n  }), transformPercent(container))\n}));\n\nconst mergeStyles = node => {\n  const style = R.propOr({}, 'style', node);\n  return R.evolve({\n    props: R.merge(style)\n  }, node);\n};\n\nconst removeNoneValues = R.evolve({\n  props: R.map(R.when(R.equals('none'), R.always(null)))\n});\n\nconst pickStyleProps = node => {\n  const styleProps = R.o(R.pick(STYLE_PROPS), R.propOr({}, 'props'))(node);\n  return R.evolve({\n    style: R.merge(styleProps)\n  }, node);\n};\n\nconst parseSvgProps = R.evolve({\n  props: R.evolve({\n    width: parseFloat,\n    height: parseFloat,\n    viewBox: _parseViewbox.default,\n    preserveAspectRatio: _parseAspectRatio.default\n  })\n});\n\nconst wrapBetweenTspan = node => ({\n  type: 'TSPAN',\n  props: {},\n  children: [node]\n});\n\nconst addMissingTspan = R.when(isText, R.evolve({\n  children: R.map(R.when(isTextInstance, wrapBetweenTspan))\n}));\n\nconst resolveSvgNode = container => R.compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles);\n\nconst resolveChildren = container => node => R.evolve({\n  children: R.map(R.compose(resolveChildren(container), resolveSvgNode(container)))\n})(node);\n\nconst parseText = fontStore => node => R.ifElse(isText, (0, _layoutText.default)(fontStore), R.evolve({\n  children: R.map(parseText(fontStore))\n}))(node);\n\nconst resolveSvgRoot = fontStore => node => {\n  const container = (0, _getContainer.default)(node);\n  return R.compose(_replaceDefs.default, parseText(fontStore), parseSvgProps, pickStyleProps, _inheritProps.default, resolveChildren(container))(node);\n};\n\nconst resolveSvg = (node, fontStore) => {\n  const mapChild = child => resolveSvg(child, fontStore);\n\n  return R.compose(R.evolve({\n    children: R.map(mapChild)\n  }), R.when(isSvg, resolveSvgRoot(fontStore)))(node);\n};\n\nvar _default = resolveSvg;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/steps/resolveSvg.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","P","_colors","_layoutText","_replaceDefs","_getContainer","_parseViewbox","_inheritProps","_matchPercent","_parseAspectRatio","STYLE_PROPS","VERTICAL_PROPS","HORIZONTAL_PROPS","isType","propEq","isSvg","Svg","isText","Text","isTextInstance","TextInstance","transformPercent","container","mapObjIndexed","value","key","match","includes","percent","height","width","parsePercent","parseFloat","parseProps","compose","evolve","props","o","x","x1","x2","y","y1","y2","r","rx","ry","cx","cy","offset","fill","transformColor","opacity","stroke","stopOpacity","stopColor","mergeStyles","node","style","propOr","merge","removeNoneValues","map","when","equals","always","pickStyleProps","styleProps","pick","parseSvgProps","viewBox","preserveAspectRatio","wrapBetweenTspan","type","children","addMissingTspan","resolveSvgNode","resolveChildren","parseText","fontStore","ifElse","resolveSvgRoot","resolveSvg","mapChild","child","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _colors = require(\"@react-pdf/stylesheet/lib/colors\");\n\nvar _layoutText = _interopRequireDefault(require(\"../svg/layoutText\"));\n\nvar _replaceDefs = _interopRequireDefault(require(\"../svg/replaceDefs\"));\n\nvar _getContainer = _interopRequireDefault(require(\"../svg/getContainer\"));\n\nvar _parseViewbox = _interopRequireDefault(require(\"../svg/parseViewbox\"));\n\nvar _inheritProps = _interopRequireDefault(require(\"../svg/inheritProps\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n\nvar _parseAspectRatio = _interopRequireDefault(require(\"../svg/parseAspectRatio\"));\n\nconst STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray'];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isType = R.propEq('type');\nconst isSvg = isType(P.Svg);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n\nconst transformPercent = container => R.mapObjIndexed((value, key) => {\n  const match = (0, _matchPercent.default)(value);\n\n  if (match && VERTICAL_PROPS.includes(key)) {\n    return match.percent * container.height;\n  }\n\n  if (match && HORIZONTAL_PROPS.includes(key)) {\n    return match.percent * container.width;\n  }\n\n  return value;\n});\n\nconst parsePercent = value => {\n  const match = (0, _matchPercent.default)(value);\n  return match ? match.percent : parseFloat(value);\n};\n\nconst parseProps = container => R.compose(R.evolve({\n  props: R.o(R.evolve({\n    x: parseFloat,\n    x1: parseFloat,\n    x2: parseFloat,\n    y: parseFloat,\n    y1: parseFloat,\n    y2: parseFloat,\n    r: parseFloat,\n    rx: parseFloat,\n    ry: parseFloat,\n    cx: parseFloat,\n    cy: parseFloat,\n    width: parseFloat,\n    height: parseFloat,\n    offset: parsePercent,\n    fill: _colors.transformColor,\n    opacity: parsePercent,\n    stroke: _colors.transformColor,\n    stopOpacity: parsePercent,\n    stopColor: _colors.transformColor\n  }), transformPercent(container))\n}));\n\nconst mergeStyles = node => {\n  const style = R.propOr({}, 'style', node);\n  return R.evolve({\n    props: R.merge(style)\n  }, node);\n};\n\nconst removeNoneValues = R.evolve({\n  props: R.map(R.when(R.equals('none'), R.always(null)))\n});\n\nconst pickStyleProps = node => {\n  const styleProps = R.o(R.pick(STYLE_PROPS), R.propOr({}, 'props'))(node);\n  return R.evolve({\n    style: R.merge(styleProps)\n  }, node);\n};\n\nconst parseSvgProps = R.evolve({\n  props: R.evolve({\n    width: parseFloat,\n    height: parseFloat,\n    viewBox: _parseViewbox.default,\n    preserveAspectRatio: _parseAspectRatio.default\n  })\n});\n\nconst wrapBetweenTspan = node => ({\n  type: 'TSPAN',\n  props: {},\n  children: [node]\n});\n\nconst addMissingTspan = R.when(isText, R.evolve({\n  children: R.map(R.when(isTextInstance, wrapBetweenTspan))\n}));\n\nconst resolveSvgNode = container => R.compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles);\n\nconst resolveChildren = container => node => R.evolve({\n  children: R.map(R.compose(resolveChildren(container), resolveSvgNode(container)))\n})(node);\n\nconst parseText = fontStore => node => R.ifElse(isText, (0, _layoutText.default)(fontStore), R.evolve({\n  children: R.map(parseText(fontStore))\n}))(node);\n\nconst resolveSvgRoot = fontStore => node => {\n  const container = (0, _getContainer.default)(node);\n  return R.compose(_replaceDefs.default, parseText(fontStore), parseSvgProps, pickStyleProps, _inheritProps.default, resolveChildren(container))(node);\n};\n\nconst resolveSvg = (node, fontStore) => {\n  const mapChild = child => resolveSvg(child, fontStore);\n\n  return R.compose(R.evolve({\n    children: R.map(mapChild)\n  }), R.when(isSvg, resolveSvgRoot(fontStore)))(node);\n};\n\nvar _default = resolveSvg;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}