{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _upperFirst = _interopRequireDefault(require(\"../utils/upperFirst\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n\nconst isNotNil = R.complement(R.isNil);\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {String} property\n * @param {Number} edge\n * @param {any} value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\nconst setYogaValue = (attr, edge) => value => R.tap(node => {\n  const yogaNode = node._yogaNode;\n\n  if (!R.isNil(value) && yogaNode) {\n    const hasEdge = isNotNil(edge);\n    const fixedMethod = `set${(0, _upperFirst.default)(attr)}`;\n    const autoMethod = `${fixedMethod}Auto`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const percent = (0, _matchPercent.default)(value);\n\n    if (percent && !yogaNode[percentMethod]) {\n      throw new Error(`You can't pass percentage values to ${attr} property`);\n    }\n\n    if (percent) {\n      if (hasEdge) {\n        yogaNode[percentMethod](edge, percent.value);\n      } else {\n        yogaNode[percentMethod](percent.value);\n      }\n    } else if (value === 'auto') {\n      if (hasEdge) {\n        yogaNode[autoMethod](edge);\n      } else {\n        yogaNode[autoMethod]();\n      }\n    } else if (hasEdge) {\n      yogaNode[fixedMethod](edge, value);\n    } else {\n      yogaNode[fixedMethod](value);\n    }\n  }\n});\n\nvar _default = setYogaValue;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/node/setYogaValue.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_upperFirst","_matchPercent","isNotNil","complement","isNil","setYogaValue","attr","edge","value","tap","node","yogaNode","_yogaNode","hasEdge","fixedMethod","autoMethod","percentMethod","percent","Error","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAxC;;AAEA,IAAIO,aAAa,GAAGR,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA1C;;AAEA,MAAMQ,QAAQ,GAAGH,CAAC,CAACI,UAAF,CAAaJ,CAAC,CAACK,KAAf,CAAjB;AACA;;;;;;;;;;AAUA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgBC,KAAK,IAAIT,CAAC,CAACU,GAAF,CAAMC,IAAI,IAAI;AAC1D,QAAMC,QAAQ,GAAGD,IAAI,CAACE,SAAtB;;AAEA,MAAI,CAACb,CAAC,CAACK,KAAF,CAAQI,KAAR,CAAD,IAAmBG,QAAvB,EAAiC;AAC/B,UAAME,OAAO,GAAGX,QAAQ,CAACK,IAAD,CAAxB;AACA,UAAMO,WAAW,GAAI,MAAK,CAAC,GAAGd,WAAW,CAACF,OAAhB,EAAyBQ,IAAzB,CAA+B,EAAzD;AACA,UAAMS,UAAU,GAAI,GAAED,WAAY,MAAlC;AACA,UAAME,aAAa,GAAI,GAAEF,WAAY,SAArC;AACA,UAAMG,OAAO,GAAG,CAAC,GAAGhB,aAAa,CAACH,OAAlB,EAA2BU,KAA3B,CAAhB;;AAEA,QAAIS,OAAO,IAAI,CAACN,QAAQ,CAACK,aAAD,CAAxB,EAAyC;AACvC,YAAM,IAAIE,KAAJ,CAAW,uCAAsCZ,IAAK,WAAtD,CAAN;AACD;;AAED,QAAIW,OAAJ,EAAa;AACX,UAAIJ,OAAJ,EAAa;AACXF,QAAAA,QAAQ,CAACK,aAAD,CAAR,CAAwBT,IAAxB,EAA8BU,OAAO,CAACT,KAAtC;AACD,OAFD,MAEO;AACLG,QAAAA,QAAQ,CAACK,aAAD,CAAR,CAAwBC,OAAO,CAACT,KAAhC;AACD;AACF,KAND,MAMO,IAAIA,KAAK,KAAK,MAAd,EAAsB;AAC3B,UAAIK,OAAJ,EAAa;AACXF,QAAAA,QAAQ,CAACI,UAAD,CAAR,CAAqBR,IAArB;AACD,OAFD,MAEO;AACLI,QAAAA,QAAQ,CAACI,UAAD,CAAR;AACD;AACF,KANM,MAMA,IAAIF,OAAJ,EAAa;AAClBF,MAAAA,QAAQ,CAACG,WAAD,CAAR,CAAsBP,IAAtB,EAA4BC,KAA5B;AACD,KAFM,MAEA;AACLG,MAAAA,QAAQ,CAACG,WAAD,CAAR,CAAsBN,KAAtB;AACD;AACF;AACF,CAhC6C,CAA9C;;AAkCA,IAAIW,QAAQ,GAAGd,YAAf;AACAT,OAAO,CAACE,OAAR,GAAkBqB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _upperFirst = _interopRequireDefault(require(\"../utils/upperFirst\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n\nconst isNotNil = R.complement(R.isNil);\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {String} property\n * @param {Number} edge\n * @param {any} value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\nconst setYogaValue = (attr, edge) => value => R.tap(node => {\n  const yogaNode = node._yogaNode;\n\n  if (!R.isNil(value) && yogaNode) {\n    const hasEdge = isNotNil(edge);\n    const fixedMethod = `set${(0, _upperFirst.default)(attr)}`;\n    const autoMethod = `${fixedMethod}Auto`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const percent = (0, _matchPercent.default)(value);\n\n    if (percent && !yogaNode[percentMethod]) {\n      throw new Error(`You can't pass percentage values to ${attr} property`);\n    }\n\n    if (percent) {\n      if (hasEdge) {\n        yogaNode[percentMethod](edge, percent.value);\n      } else {\n        yogaNode[percentMethod](percent.value);\n      }\n    } else if (value === 'auto') {\n      if (hasEdge) {\n        yogaNode[autoMethod](edge);\n      } else {\n        yogaNode[autoMethod]();\n      }\n    } else if (hasEdge) {\n      yogaNode[fixedMethod](edge, value);\n    } else {\n      yogaNode[fixedMethod](value);\n    }\n  }\n});\n\nvar _default = setYogaValue;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}