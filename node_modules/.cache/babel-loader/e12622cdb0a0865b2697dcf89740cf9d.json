{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _lineIndexAtHeight = _interopRequireDefault(require(\"./lineIndexAtHeight\"));\n\nvar _heightAtLineIndex = _interopRequireDefault(require(\"./heightAtLineIndex\"));\n\nconst zero = R.always(0);\nconst getTop = R.pathOr(0, ['box', 'top']);\nconst getWidows = R.pathOr(2, ['props', 'widows']);\nconst getOrphans = R.pathOr(2, ['props', 'orphans']);\n\nconst getLineBreak = (node, height) => {\n  const top = getTop(node);\n  const widows = getWidows(node);\n  const orphans = getOrphans(node);\n  const linesQuantity = node.lines.length;\n  const slicedLine = (0, _lineIndexAtHeight.default)(node, height - top);\n\n  if (slicedLine === 0) {\n    return 0;\n  }\n\n  if (linesQuantity < orphans) {\n    return linesQuantity;\n  }\n\n  if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  }\n\n  if (linesQuantity === orphans + widows) {\n    return orphans;\n  }\n\n  if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n\n  return slicedLine;\n};\n\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = (0, _heightAtLineIndex.default)(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n  const current = R.evolve({\n    lines: R.slice(0, slicedLineIndex),\n    style: R.evolve({\n      marginBottom: zero,\n      paddingBottom: zero,\n      borderBottomWidth: zero,\n      borderBottomLeftRadius: zero,\n      borderBottomRightRadius: zero\n    }),\n    box: {\n      height: R.always(currentHeight),\n      borderBottomWidth: zero\n    }\n  }, node);\n  const next = R.evolve({\n    lines: R.slice(slicedLineIndex, Infinity),\n    style: R.evolve({\n      marginTop: zero,\n      paddingTop: zero,\n      borderTopWidth: zero,\n      borderTopLeftRadius: zero,\n      borderTopRightRadius: zero\n    }),\n    box: {\n      top: zero,\n      height: R.always(nextHeight),\n      borderTopWidth: zero\n    }\n  }, node);\n  return [current, next];\n};\n\nvar _default = splitText;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kaja/Code/mallar/app/node_modules/@react-pdf/layout/lib/text/splitText.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_lineIndexAtHeight","_heightAtLineIndex","zero","always","getTop","pathOr","getWidows","getOrphans","getLineBreak","node","height","top","widows","orphans","linesQuantity","lines","length","slicedLine","splitText","slicedLineIndex","currentHeight","nextHeight","box","current","evolve","slice","style","marginBottom","paddingBottom","borderBottomWidth","borderBottomLeftRadius","borderBottomRightRadius","next","Infinity","marginTop","paddingTop","borderTopWidth","borderTopLeftRadius","borderTopRightRadius","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _lineIndexAtHeight = _interopRequireDefault(require(\"./lineIndexAtHeight\"));\n\nvar _heightAtLineIndex = _interopRequireDefault(require(\"./heightAtLineIndex\"));\n\nconst zero = R.always(0);\nconst getTop = R.pathOr(0, ['box', 'top']);\nconst getWidows = R.pathOr(2, ['props', 'widows']);\nconst getOrphans = R.pathOr(2, ['props', 'orphans']);\n\nconst getLineBreak = (node, height) => {\n  const top = getTop(node);\n  const widows = getWidows(node);\n  const orphans = getOrphans(node);\n  const linesQuantity = node.lines.length;\n  const slicedLine = (0, _lineIndexAtHeight.default)(node, height - top);\n\n  if (slicedLine === 0) {\n    return 0;\n  }\n\n  if (linesQuantity < orphans) {\n    return linesQuantity;\n  }\n\n  if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  }\n\n  if (linesQuantity === orphans + widows) {\n    return orphans;\n  }\n\n  if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n\n  return slicedLine;\n};\n\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = (0, _heightAtLineIndex.default)(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n  const current = R.evolve({\n    lines: R.slice(0, slicedLineIndex),\n    style: R.evolve({\n      marginBottom: zero,\n      paddingBottom: zero,\n      borderBottomWidth: zero,\n      borderBottomLeftRadius: zero,\n      borderBottomRightRadius: zero\n    }),\n    box: {\n      height: R.always(currentHeight),\n      borderBottomWidth: zero\n    }\n  }, node);\n  const next = R.evolve({\n    lines: R.slice(slicedLineIndex, Infinity),\n    style: R.evolve({\n      marginTop: zero,\n      paddingTop: zero,\n      borderTopWidth: zero,\n      borderTopLeftRadius: zero,\n      borderTopRightRadius: zero\n    }),\n    box: {\n      top: zero,\n      height: R.always(nextHeight),\n      borderTopWidth: zero\n    }\n  }, node);\n  return [current, next];\n};\n\nvar _default = splitText;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}