{"ast":null,"code":"// Generated by CoffeeScript 1.4.0\n\n/*\n# MIT LICENSE\n# Copyright (c) 2011 Devon Govett\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of this \n# software and associated documentation files (the \"Software\"), to deal in the Software \n# without restriction, including without limitation the rights to use, copy, modify, merge, \n# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons \n# to whom the Software is furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all copies or \n# substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \n# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n(function () {\n  var PNG, fs, zlib;\n  fs = require('fs');\n  zlib = require('zlib');\n\n  module.exports = PNG = function () {\n    PNG.decode = function (path, fn) {\n      return fs.readFile(path, function (err, file) {\n        var png;\n        png = new PNG(file);\n        return png.decode(function (pixels) {\n          return fn(pixels);\n        });\n      });\n    };\n\n    PNG.load = function (path) {\n      var file;\n      file = fs.readFileSync(path);\n      return new PNG(file);\n    };\n\n    function PNG(data) {\n      var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;\n\n      this.data = data;\n      this.pos = 8;\n      this.palette = [];\n      this.imgData = [];\n      this.transparency = {};\n      this.text = {};\n\n      while (true) {\n        chunkSize = this.readUInt32();\n\n        section = function () {\n          var _i, _results;\n\n          _results = [];\n\n          for (i = _i = 0; _i < 4; i = ++_i) {\n            _results.push(String.fromCharCode(this.data[this.pos++]));\n          }\n\n          return _results;\n        }.call(this).join('');\n\n        switch (section) {\n          case 'IHDR':\n            this.width = this.readUInt32();\n            this.height = this.readUInt32();\n            this.bits = this.data[this.pos++];\n            this.colorType = this.data[this.pos++];\n            this.compressionMethod = this.data[this.pos++];\n            this.filterMethod = this.data[this.pos++];\n            this.interlaceMethod = this.data[this.pos++];\n            break;\n\n          case 'PLTE':\n            this.palette = this.read(chunkSize);\n            break;\n\n          case 'IDAT':\n            for (i = _i = 0; _i < chunkSize; i = _i += 1) {\n              this.imgData.push(this.data[this.pos++]);\n            }\n\n            break;\n\n          case 'tRNS':\n            this.transparency = {};\n\n            switch (this.colorType) {\n              case 3:\n                this.transparency.indexed = this.read(chunkSize);\n                short = 255 - this.transparency.indexed.length;\n\n                if (short > 0) {\n                  for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {\n                    this.transparency.indexed.push(255);\n                  }\n                }\n\n                break;\n\n              case 0:\n                this.transparency.grayscale = this.read(chunkSize)[0];\n                break;\n\n              case 2:\n                this.transparency.rgb = this.read(chunkSize);\n            }\n\n            break;\n\n          case 'tEXt':\n            text = this.read(chunkSize);\n            index = text.indexOf(0);\n            key = String.fromCharCode.apply(String, text.slice(0, index));\n            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n            break;\n\n          case 'IEND':\n            this.colors = function () {\n              switch (this.colorType) {\n                case 0:\n                case 3:\n                case 4:\n                  return 1;\n\n                case 2:\n                case 6:\n                  return 3;\n              }\n            }.call(this);\n\n            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;\n            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n            this.pixelBitlength = this.bits * colors;\n\n            this.colorSpace = function () {\n              switch (this.colors) {\n                case 1:\n                  return 'DeviceGray';\n\n                case 3:\n                  return 'DeviceRGB';\n              }\n            }.call(this);\n\n            this.imgData = new Buffer(this.imgData);\n            return;\n\n          default:\n            this.pos += chunkSize;\n        }\n\n        this.pos += 4;\n\n        if (this.pos > this.data.length) {\n          throw new Error(\"Incomplete or corrupt PNG file\");\n        }\n      }\n\n      return;\n    }\n\n    PNG.prototype.read = function (bytes) {\n      var i, _i, _results;\n\n      _results = [];\n\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {\n        _results.push(this.data[this.pos++]);\n      }\n\n      return _results;\n    };\n\n    PNG.prototype.readUInt32 = function () {\n      var b1, b2, b3, b4;\n      b1 = this.data[this.pos++] << 24;\n      b2 = this.data[this.pos++] << 16;\n      b3 = this.data[this.pos++] << 8;\n      b4 = this.data[this.pos++];\n      return b1 | b2 | b3 | b4;\n    };\n\n    PNG.prototype.readUInt16 = function () {\n      var b1, b2;\n      b1 = this.data[this.pos++] << 8;\n      b2 = this.data[this.pos++];\n      return b1 | b2;\n    };\n\n    PNG.prototype.decodePixels = function (fn) {\n      var _this = this;\n\n      return zlib.inflate(this.imgData, function (err, data) {\n        var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;\n\n        if (err) {\n          throw err;\n        }\n\n        pixelBytes = _this.pixelBitlength / 8;\n        scanlineLength = pixelBytes * _this.width;\n        pixels = new Buffer(scanlineLength * _this.height);\n        length = data.length;\n        row = 0;\n        pos = 0;\n        c = 0;\n\n        while (pos < length) {\n          switch (data[pos++]) {\n            case 0:\n              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {\n                pixels[c++] = data[pos++];\n              }\n\n              break;\n\n            case 1:\n              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {\n                byte = data[pos++];\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                pixels[c++] = (byte + left) % 256;\n              }\n\n              break;\n\n            case 2:\n              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {\n                byte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                pixels[c++] = (upper + byte) % 256;\n              }\n\n              break;\n\n            case 3:\n              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {\n                byte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;\n              }\n\n              break;\n\n            case 4:\n              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {\n                byte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n\n                if (row === 0) {\n                  upper = upperLeft = 0;\n                } else {\n                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];\n                }\n\n                p = left + upper - upperLeft;\n                pa = Math.abs(p - left);\n                pb = Math.abs(p - upper);\n                pc = Math.abs(p - upperLeft);\n\n                if (pa <= pb && pa <= pc) {\n                  paeth = left;\n                } else if (pb <= pc) {\n                  paeth = upper;\n                } else {\n                  paeth = upperLeft;\n                }\n\n                pixels[c++] = (byte + paeth) % 256;\n              }\n\n              break;\n\n            default:\n              throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);\n          }\n\n          row++;\n        }\n\n        return fn(pixels);\n      });\n    };\n\n    PNG.prototype.decodePalette = function () {\n      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;\n\n      palette = this.palette;\n      transparency = this.transparency.indexed || [];\n      ret = new Buffer(transparency.length + palette.length);\n      pos = 0;\n      length = palette.length;\n      c = 0;\n\n      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {\n        ret[pos++] = palette[i];\n        ret[pos++] = palette[i + 1];\n        ret[pos++] = palette[i + 2];\n        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;\n      }\n\n      return ret;\n    };\n\n    PNG.prototype.copyToImageData = function (imageData, pixels) {\n      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;\n\n      colors = this.colors;\n      palette = null;\n      alpha = this.hasAlphaChannel;\n\n      if (this.palette.length) {\n        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();\n        colors = 4;\n        alpha = true;\n      }\n\n      data = (imageData != null ? imageData.data : void 0) || imageData;\n      length = data.length;\n      input = palette || pixels;\n      i = j = 0;\n\n      if (colors === 1) {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          v = input[k++];\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      } else {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      }\n    };\n\n    PNG.prototype.decode = function (fn) {\n      var ret,\n          _this = this;\n\n      ret = new Buffer(this.width * this.height * 4);\n      return this.decodePixels(function (pixels) {\n        _this.copyToImageData(ret, pixels);\n\n        return fn(ret);\n      });\n    };\n\n    return PNG;\n  }();\n}).call(this);","map":{"version":3,"sources":["/Users/kaja/Code/mallar/node_modules/png-js/png-node.js"],"names":["PNG","fs","zlib","require","module","exports","decode","path","fn","readFile","err","file","png","pixels","load","readFileSync","data","chunkSize","colors","i","index","key","section","short","text","_i","_j","_ref","pos","palette","imgData","transparency","readUInt32","_results","push","String","fromCharCode","call","join","width","height","bits","colorType","compressionMethod","filterMethod","interlaceMethod","read","indexed","length","grayscale","rgb","indexOf","apply","slice","hasAlphaChannel","pixelBitlength","colorSpace","Buffer","Error","prototype","bytes","b1","b2","b3","b4","readUInt16","decodePixels","_this","inflate","byte","c","col","left","p","pa","paeth","pb","pc","pixelBytes","row","scanlineLength","upper","upperLeft","_k","_l","_m","Math","floor","abs","decodePalette","ret","_ref1","copyToImageData","imageData","alpha","input","j","k","v","_decodedPalette"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.4.0\n\n/*\n# MIT LICENSE\n# Copyright (c) 2011 Devon Govett\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of this \n# software and associated documentation files (the \"Software\"), to deal in the Software \n# without restriction, including without limitation the rights to use, copy, modify, merge, \n# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons \n# to whom the Software is furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all copies or \n# substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \n# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n(function() {\n  var PNG, fs, zlib;\n\n  fs = require('fs');\n\n  zlib = require('zlib');\n\n  module.exports = PNG = (function() {\n\n    PNG.decode = function(path, fn) {\n      return fs.readFile(path, function(err, file) {\n        var png;\n        png = new PNG(file);\n        return png.decode(function(pixels) {\n          return fn(pixels);\n        });\n      });\n    };\n\n    PNG.load = function(path) {\n      var file;\n      file = fs.readFileSync(path);\n      return new PNG(file);\n    };\n\n    function PNG(data) {\n      var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;\n      this.data = data;\n      this.pos = 8;\n      this.palette = [];\n      this.imgData = [];\n      this.transparency = {};\n      this.text = {};\n      while (true) {\n        chunkSize = this.readUInt32();\n        section = ((function() {\n          var _i, _results;\n          _results = [];\n          for (i = _i = 0; _i < 4; i = ++_i) {\n            _results.push(String.fromCharCode(this.data[this.pos++]));\n          }\n          return _results;\n        }).call(this)).join('');\n        switch (section) {\n          case 'IHDR':\n            this.width = this.readUInt32();\n            this.height = this.readUInt32();\n            this.bits = this.data[this.pos++];\n            this.colorType = this.data[this.pos++];\n            this.compressionMethod = this.data[this.pos++];\n            this.filterMethod = this.data[this.pos++];\n            this.interlaceMethod = this.data[this.pos++];\n            break;\n          case 'PLTE':\n            this.palette = this.read(chunkSize);\n            break;\n          case 'IDAT':\n            for (i = _i = 0; _i < chunkSize; i = _i += 1) {\n              this.imgData.push(this.data[this.pos++]);\n            }\n            break;\n          case 'tRNS':\n            this.transparency = {};\n            switch (this.colorType) {\n              case 3:\n                this.transparency.indexed = this.read(chunkSize);\n                short = 255 - this.transparency.indexed.length;\n                if (short > 0) {\n                  for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {\n                    this.transparency.indexed.push(255);\n                  }\n                }\n                break;\n              case 0:\n                this.transparency.grayscale = this.read(chunkSize)[0];\n                break;\n              case 2:\n                this.transparency.rgb = this.read(chunkSize);\n            }\n            break;\n          case 'tEXt':\n            text = this.read(chunkSize);\n            index = text.indexOf(0);\n            key = String.fromCharCode.apply(String, text.slice(0, index));\n            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n            break;\n          case 'IEND':\n            this.colors = (function() {\n              switch (this.colorType) {\n                case 0:\n                case 3:\n                case 4:\n                  return 1;\n                case 2:\n                case 6:\n                  return 3;\n              }\n            }).call(this);\n            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;\n            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n            this.pixelBitlength = this.bits * colors;\n            this.colorSpace = (function() {\n              switch (this.colors) {\n                case 1:\n                  return 'DeviceGray';\n                case 3:\n                  return 'DeviceRGB';\n              }\n            }).call(this);\n            this.imgData = new Buffer(this.imgData);\n            return;\n          default:\n            this.pos += chunkSize;\n        }\n        this.pos += 4;\n        if (this.pos > this.data.length) {\n          throw new Error(\"Incomplete or corrupt PNG file\");\n        }\n      }\n      return;\n    }\n\n    PNG.prototype.read = function(bytes) {\n      var i, _i, _results;\n      _results = [];\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {\n        _results.push(this.data[this.pos++]);\n      }\n      return _results;\n    };\n\n    PNG.prototype.readUInt32 = function() {\n      var b1, b2, b3, b4;\n      b1 = this.data[this.pos++] << 24;\n      b2 = this.data[this.pos++] << 16;\n      b3 = this.data[this.pos++] << 8;\n      b4 = this.data[this.pos++];\n      return b1 | b2 | b3 | b4;\n    };\n\n    PNG.prototype.readUInt16 = function() {\n      var b1, b2;\n      b1 = this.data[this.pos++] << 8;\n      b2 = this.data[this.pos++];\n      return b1 | b2;\n    };\n\n    PNG.prototype.decodePixels = function(fn) {\n      var _this = this;\n      return zlib.inflate(this.imgData, function(err, data) {\n        var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;\n        if (err) {\n          throw err;\n        }\n        pixelBytes = _this.pixelBitlength / 8;\n        scanlineLength = pixelBytes * _this.width;\n        pixels = new Buffer(scanlineLength * _this.height);\n        length = data.length;\n        row = 0;\n        pos = 0;\n        c = 0;\n        while (pos < length) {\n          switch (data[pos++]) {\n            case 0:\n              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {\n                pixels[c++] = data[pos++];\n              }\n              break;\n            case 1:\n              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {\n                byte = data[pos++];\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                pixels[c++] = (byte + left) % 256;\n              }\n              break;\n            case 2:\n              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {\n                byte = data[pos++];\n                col = (i - (i % pixelBytes)) / pixelBytes;\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\n                pixels[c++] = (upper + byte) % 256;\n              }\n              break;\n            case 3:\n              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {\n                byte = data[pos++];\n                col = (i - (i % pixelBytes)) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\n                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;\n              }\n              break;\n            case 4:\n              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {\n                byte = data[pos++];\n                col = (i - (i % pixelBytes)) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                if (row === 0) {\n                  upper = upperLeft = 0;\n                } else {\n                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\n                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];\n                }\n                p = left + upper - upperLeft;\n                pa = Math.abs(p - left);\n                pb = Math.abs(p - upper);\n                pc = Math.abs(p - upperLeft);\n                if (pa <= pb && pa <= pc) {\n                  paeth = left;\n                } else if (pb <= pc) {\n                  paeth = upper;\n                } else {\n                  paeth = upperLeft;\n                }\n                pixels[c++] = (byte + paeth) % 256;\n              }\n              break;\n            default:\n              throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);\n          }\n          row++;\n        }\n        return fn(pixels);\n      });\n    };\n\n    PNG.prototype.decodePalette = function() {\n      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;\n      palette = this.palette;\n      transparency = this.transparency.indexed || [];\n      ret = new Buffer(transparency.length + palette.length);\n      pos = 0;\n      length = palette.length;\n      c = 0;\n      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {\n        ret[pos++] = palette[i];\n        ret[pos++] = palette[i + 1];\n        ret[pos++] = palette[i + 2];\n        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;\n      }\n      return ret;\n    };\n\n    PNG.prototype.copyToImageData = function(imageData, pixels) {\n      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;\n      colors = this.colors;\n      palette = null;\n      alpha = this.hasAlphaChannel;\n      if (this.palette.length) {\n        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();\n        colors = 4;\n        alpha = true;\n      }\n      data = (imageData != null ? imageData.data : void 0) || imageData;\n      length = data.length;\n      input = palette || pixels;\n      i = j = 0;\n      if (colors === 1) {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          v = input[k++];\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      } else {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      }\n    };\n\n    PNG.prototype.decode = function(fn) {\n      var ret,\n        _this = this;\n      ret = new Buffer(this.width * this.height * 4);\n      return this.decodePixels(function(pixels) {\n        _this.copyToImageData(ret, pixels);\n        return fn(ret);\n      });\n    };\n\n    return PNG;\n\n  })();\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}